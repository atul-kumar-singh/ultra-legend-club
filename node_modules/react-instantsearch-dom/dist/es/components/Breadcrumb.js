var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { translatable } from 'react-instantsearch-core';
import { createClassNames } from '../core/utils';
import Link from './Link';

var cx = createClassNames('Breadcrumb');

var itemsPropType = PropTypes.arrayOf(PropTypes.shape({
  label: PropTypes.string.isRequired,
  value: PropTypes.string.isRequired
}));

var Breadcrumb = function (_Component) {
  _inherits(Breadcrumb, _Component);

  function Breadcrumb() {
    _classCallCheck(this, Breadcrumb);

    return _possibleConstructorReturn(this, (Breadcrumb.__proto__ || Object.getPrototypeOf(Breadcrumb)).apply(this, arguments));
  }

  _createClass(Breadcrumb, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          canRefine = _props.canRefine,
          createURL = _props.createURL,
          items = _props.items,
          refine = _props.refine,
          rootURL = _props.rootURL,
          separator = _props.separator,
          translate = _props.translate,
          className = _props.className;

      var rootPath = canRefine ? React.createElement(
        'li',
        { className: cx('item') },
        React.createElement(
          Link,
          {
            className: cx('link'),
            onClick: function onClick() {
              return !rootURL ? refine() : null;
            },
            href: rootURL ? rootURL : createURL()
          },
          translate('rootLabel')
        )
      ) : null;

      var breadcrumb = items.map(function (item, idx) {
        var isLast = idx === items.length - 1;
        return React.createElement(
          'li',
          { className: cx('item', isLast && 'item--selected'), key: idx },
          React.createElement(
            'span',
            { className: cx('separator') },
            separator
          ),
          !isLast ? React.createElement(
            Link,
            {
              className: cx('link'),
              onClick: function onClick() {
                return refine(item.value);
              },
              href: createURL(item.value)
            },
            item.label
          ) : item.label
        );
      });

      return React.createElement(
        'div',
        {
          className: classNames(cx('', !canRefine && '-noRefinement'), className)
        },
        React.createElement(
          'ul',
          { className: cx('list') },
          rootPath,
          breadcrumb
        )
      );
    }
  }]);

  return Breadcrumb;
}(Component);

Breadcrumb.propTypes = {
  canRefine: PropTypes.bool.isRequired,
  createURL: PropTypes.func.isRequired,
  items: itemsPropType,
  refine: PropTypes.func.isRequired,
  rootURL: PropTypes.string,
  separator: PropTypes.node,
  translate: PropTypes.func.isRequired,
  className: PropTypes.string
};
Breadcrumb.defaultProps = {
  rootURL: null,
  separator: ' > ',
  className: ''
};


export default translatable({
  rootLabel: 'Home'
})(Breadcrumb);