'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _utils = require('../core/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = (0, _utils.createClassNames)('Panel');

var Panel = function (_Component) {
  _inherits(Panel, _Component);

  function Panel() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Panel);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Panel.__proto__ || Object.getPrototypeOf(Panel)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      canRefine: true
    }, _this.setCanRefine = function (nextCanRefine) {
      _this.setState({ canRefine: nextCanRefine });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Panel, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        setCanRefine: this.setCanRefine
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          className = _props.className,
          header = _props.header,
          footer = _props.footer;
      var canRefine = this.state.canRefine;


      return _react2.default.createElement(
        'div',
        {
          className: (0, _classnames2.default)(cx('', !canRefine && '-noRefinement'), className)
        },
        header && _react2.default.createElement(
          'div',
          { className: cx('header') },
          header
        ),
        _react2.default.createElement(
          'div',
          { className: cx('body') },
          children
        ),
        footer && _react2.default.createElement(
          'div',
          { className: cx('footer') },
          footer
        )
      );
    }
  }]);

  return Panel;
}(_react.Component);

Panel.propTypes = {
  children: _propTypes2.default.node.isRequired,
  className: _propTypes2.default.string,
  header: _propTypes2.default.node,
  footer: _propTypes2.default.node
};
Panel.childContextTypes = {
  setCanRefine: _propTypes2.default.func.isRequired
};
Panel.defaultProps = {
  className: '',
  header: null,
  footer: null
};
exports.default = Panel;