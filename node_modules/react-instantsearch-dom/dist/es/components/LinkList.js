import _has from 'lodash/has';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Link from './Link';

var LinkList = function (_Component) {
  _inherits(LinkList, _Component);

  function LinkList() {
    _classCallCheck(this, LinkList);

    return _possibleConstructorReturn(this, (LinkList.__proto__ || Object.getPrototypeOf(LinkList)).apply(this, arguments));
  }

  _createClass(LinkList, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          cx = _props.cx,
          createURL = _props.createURL,
          items = _props.items,
          onSelect = _props.onSelect,
          canRefine = _props.canRefine;

      return React.createElement(
        'ul',
        { className: cx('list', !canRefine && 'list--noRefinement') },
        items.map(function (item) {
          return React.createElement(
            'li',
            {
              key: _has(item, 'key') ? item.key : item.value,
              className: cx('item', item.selected && !item.disabled && 'item--selected', item.disabled && 'item--disabled', item.modifier)
            },
            item.disabled ? React.createElement(
              'span',
              { className: cx('link') },
              _has(item, 'label') ? item.label : item.value
            ) : React.createElement(
              Link,
              {
                className: cx('link', item.selected && 'link--selected'),
                'aria-label': item.ariaLabel,
                href: createURL(item.value),
                onClick: function onClick() {
                  return onSelect(item.value);
                }
              },
              _has(item, 'label') ? item.label : item.value
            )
          );
        })
      );
    }
  }]);

  return LinkList;
}(Component);

LinkList.propTypes = {
  cx: PropTypes.func.isRequired,
  createURL: PropTypes.func.isRequired,

  items: PropTypes.arrayOf(PropTypes.shape({
    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.object]).isRequired,

    key: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

    label: PropTypes.node,

    modifier: PropTypes.string,
    ariaLabel: PropTypes.string,
    disabled: PropTypes.bool
  })),
  onSelect: PropTypes.func.isRequired,
  canRefine: PropTypes.bool.isRequired
};
export default LinkList;