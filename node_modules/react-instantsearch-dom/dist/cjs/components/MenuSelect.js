'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _find2 = require('lodash/find');

var _find3 = _interopRequireDefault(_find2);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactInstantsearchCore = require('react-instantsearch-core');

var _utils = require('../core/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = (0, _utils.createClassNames)('MenuSelect');

var MenuSelect = function (_Component) {
  _inherits(MenuSelect, _Component);

  function MenuSelect() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, MenuSelect);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = MenuSelect.__proto__ || Object.getPrototypeOf(MenuSelect)).call.apply(_ref, [this].concat(args))), _this), _this.handleSelectChange = function (_ref2) {
      var value = _ref2.target.value;

      _this.props.refine(value === 'ais__see__all__option' ? '' : value);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(MenuSelect, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          items = _props.items,
          canRefine = _props.canRefine,
          translate = _props.translate,
          className = _props.className;


      return _react2.default.createElement(
        'div',
        {
          className: (0, _classnames2.default)(cx('', !canRefine && '-noRefinement'), className)
        },
        _react2.default.createElement(
          'select',
          {
            value: this.selectedValue,
            onChange: this.handleSelectChange,
            className: cx('select')
          },
          _react2.default.createElement(
            'option',
            { value: 'ais__see__all__option', className: cx('option') },
            translate('seeAllOption')
          ),
          items.map(function (item) {
            return _react2.default.createElement(
              'option',
              {
                key: item.value,
                value: item.value,
                className: cx('option')
              },
              item.label,
              ' (',
              item.count,
              ')'
            );
          })
        )
      );
    }
  }, {
    key: 'selectedValue',
    get: function get() {
      var _ref3 = (0, _find3.default)(this.props.items, { isRefined: true }) || {
        value: 'ais__see__all__option'
      },
          value = _ref3.value;

      return value;
    }
  }]);

  return MenuSelect;
}(_react.Component);

MenuSelect.propTypes = {
  items: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    label: _propTypes2.default.string.isRequired,
    value: _propTypes2.default.string.isRequired,
    count: _propTypes2.default.oneOfType([_propTypes2.default.number.isRequired, _propTypes2.default.string.isRequired]),
    isRefined: _propTypes2.default.bool.isRequired
  })).isRequired,
  canRefine: _propTypes2.default.bool.isRequired,
  refine: _propTypes2.default.func.isRequired,
  translate: _propTypes2.default.func.isRequired,
  className: _propTypes2.default.string
};
MenuSelect.defaultProps = {
  className: ''
};
exports.default = (0, _reactInstantsearchCore.translatable)({
  seeAllOption: 'See all'
})(MenuSelect);