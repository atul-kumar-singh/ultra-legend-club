import _keys from 'lodash/keys';
import _difference from 'lodash/difference';
import _omit from 'lodash/omit';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import createConnector from '../core/createConnector';
import { hasMultipleIndex, getIndex, refineValue } from '../core/indexUtils';

function getId() {
  return 'configure';
}

export default createConnector({
  displayName: 'AlgoliaConfigure',
  getProvidedProps: function getProvidedProps() {
    return {};
  },
  getSearchParameters: function getSearchParameters(searchParameters, props) {
    var items = _omit(props, 'children');
    return searchParameters.setQueryParameters(items);
  },
  transitionState: function transitionState(props, prevSearchState, nextSearchState) {
    var id = getId();
    var items = _omit(props, 'children');
    var nonPresentKeys = this._props ? _difference(_keys(this._props), _keys(props)) : [];
    this._props = props;
    var nextValue = _defineProperty({}, id, _extends({}, _omit(nextSearchState[id], nonPresentKeys), items));
    return refineValue(nextSearchState, nextValue, this.context);
  },
  cleanUp: function cleanUp(props, searchState) {
    var id = getId();
    var index = getIndex(this.context);
    var subState = hasMultipleIndex(this.context) && searchState.indices ? searchState.indices[index] : searchState;
    var configureKeys = subState && subState[id] ? Object.keys(subState[id]) : [];
    var configureState = configureKeys.reduce(function (acc, item) {
      if (!props[item]) {
        acc[item] = subState[id][item];
      }
      return acc;
    }, {});
    var nextValue = _defineProperty({}, id, configureState);
    return refineValue(searchState, nextValue, this.context);
  }
});