import _pick from 'lodash/pick';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { translatable } from 'react-instantsearch-core';
import { createClassNames } from '../core/utils';
import List from './List';
import Link from './Link';

var cx = createClassNames('HierarchicalMenu');

var itemsPropType = PropTypes.arrayOf(PropTypes.shape({
  label: PropTypes.string.isRequired,
  value: PropTypes.string,
  count: PropTypes.number.isRequired,
  items: function items() {
    return itemsPropType.apply(undefined, arguments);
  }
}));

var HierarchicalMenu = function (_Component) {
  _inherits(HierarchicalMenu, _Component);

  function HierarchicalMenu() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, HierarchicalMenu);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = HierarchicalMenu.__proto__ || Object.getPrototypeOf(HierarchicalMenu)).call.apply(_ref, [this].concat(args))), _this), _this.renderItem = function (item) {
      var _this$props = _this.props,
          createURL = _this$props.createURL,
          refine = _this$props.refine;


      return React.createElement(
        Link,
        {
          className: cx('link'),
          onClick: function onClick() {
            return refine(item.value);
          },
          href: createURL(item.value)
        },
        React.createElement(
          'span',
          { className: cx('label') },
          item.label
        ),
        ' ',
        React.createElement(
          'span',
          { className: cx('count') },
          item.count
        )
      );
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(HierarchicalMenu, [{
    key: 'render',
    value: function render() {
      return React.createElement(List, _extends({
        renderItem: this.renderItem,
        cx: cx
      }, _pick(this.props, ['translate', 'items', 'showMore', 'limit', 'showMoreLimit', 'isEmpty', 'canRefine', 'className'])));
    }
  }]);

  return HierarchicalMenu;
}(Component);

HierarchicalMenu.propTypes = {
  translate: PropTypes.func.isRequired,
  refine: PropTypes.func.isRequired,
  createURL: PropTypes.func.isRequired,
  canRefine: PropTypes.bool.isRequired,
  items: itemsPropType,
  showMore: PropTypes.bool,
  className: PropTypes.string,
  limit: PropTypes.number,
  showMoreLimit: PropTypes.number,
  transformItems: PropTypes.func
};
HierarchicalMenu.defaultProps = {
  className: ''
};


export default translatable({
  showMore: function showMore(extended) {
    return extended ? 'Show less' : 'Show more';
  }
})(HierarchicalMenu);