import _find from 'lodash/find';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { translatable } from 'react-instantsearch-core';
import { createClassNames } from '../core/utils';

var cx = createClassNames('MenuSelect');

var MenuSelect = function (_Component) {
  _inherits(MenuSelect, _Component);

  function MenuSelect() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, MenuSelect);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = MenuSelect.__proto__ || Object.getPrototypeOf(MenuSelect)).call.apply(_ref, [this].concat(args))), _this), _this.handleSelectChange = function (_ref2) {
      var value = _ref2.target.value;

      _this.props.refine(value === 'ais__see__all__option' ? '' : value);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(MenuSelect, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          items = _props.items,
          canRefine = _props.canRefine,
          translate = _props.translate,
          className = _props.className;


      return React.createElement(
        'div',
        {
          className: classNames(cx('', !canRefine && '-noRefinement'), className)
        },
        React.createElement(
          'select',
          {
            value: this.selectedValue,
            onChange: this.handleSelectChange,
            className: cx('select')
          },
          React.createElement(
            'option',
            { value: 'ais__see__all__option', className: cx('option') },
            translate('seeAllOption')
          ),
          items.map(function (item) {
            return React.createElement(
              'option',
              {
                key: item.value,
                value: item.value,
                className: cx('option')
              },
              item.label,
              ' (',
              item.count,
              ')'
            );
          })
        )
      );
    }
  }, {
    key: 'selectedValue',
    get: function get() {
      var _ref3 = _find(this.props.items, { isRefined: true }) || {
        value: 'ais__see__all__option'
      },
          value = _ref3.value;

      return value;
    }
  }]);

  return MenuSelect;
}(Component);

MenuSelect.propTypes = {
  items: PropTypes.arrayOf(PropTypes.shape({
    label: PropTypes.string.isRequired,
    value: PropTypes.string.isRequired,
    count: PropTypes.oneOfType([PropTypes.number.isRequired, PropTypes.string.isRequired]),
    isRefined: PropTypes.bool.isRequired
  })).isRequired,
  canRefine: PropTypes.bool.isRequired,
  refine: PropTypes.func.isRequired,
  translate: PropTypes.func.isRequired,
  className: PropTypes.string
};
MenuSelect.defaultProps = {
  className: ''
};


export default translatable({
  seeAllOption: 'See all'
})(MenuSelect);