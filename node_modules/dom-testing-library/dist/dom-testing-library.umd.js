(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.DomTestingLibrary = {})));
}(this, (function (exports) { 'use strict';

  function fuzzyMatches(textToMatch, node, matcher) {
    var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
        _ref$collapseWhitespa = _ref.collapseWhitespace,
        collapseWhitespace = _ref$collapseWhitespa === undefined ? true : _ref$collapseWhitespa,
        _ref$trim = _ref.trim,
        trim = _ref$trim === undefined ? true : _ref$trim;

    if (typeof textToMatch !== 'string') {
      return false;
    }
    var normalizedText = normalize(textToMatch, { trim: trim, collapseWhitespace: collapseWhitespace });
    if (typeof matcher === 'string') {
      return normalizedText.toLowerCase().includes(matcher.toLowerCase());
    } else if (typeof matcher === 'function') {
      return matcher(normalizedText, node);
    } else {
      return matcher.test(normalizedText);
    }
  }

  function matches(textToMatch, node, matcher) {
    var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
        _ref2$collapseWhitesp = _ref2.collapseWhitespace,
        collapseWhitespace = _ref2$collapseWhitesp === undefined ? true : _ref2$collapseWhitesp,
        _ref2$trim = _ref2.trim,
        trim = _ref2$trim === undefined ? true : _ref2$trim;

    if (typeof textToMatch !== 'string') {
      return false;
    }
    var normalizedText = normalize(textToMatch, { trim: trim, collapseWhitespace: collapseWhitespace });
    if (typeof matcher === 'string') {
      return normalizedText === matcher;
    } else if (typeof matcher === 'function') {
      return matcher(normalizedText, node);
    } else {
      return matcher.test(normalizedText);
    }
  }

  function normalize(text, _ref3) {
    var trim = _ref3.trim,
        collapseWhitespace = _ref3.collapseWhitespace;

    var normalizedText = text;
    normalizedText = trim ? normalizedText.trim() : normalizedText;
    normalizedText = collapseWhitespace ? normalizedText.replace(/\s+/g, ' ') : normalizedText;
    return normalizedText;
  }

  function getNodeText(node) {
    return Array.from(node.childNodes).filter(function (child) {
      return child.nodeType === window.Node.TEXT_NODE && Boolean(child.textContent);
    }).map(function (c) {
      return c.textContent;
    }).join('');
  }

  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var colorName = {
  	"aliceblue": [240, 248, 255],
  	"antiquewhite": [250, 235, 215],
  	"aqua": [0, 255, 255],
  	"aquamarine": [127, 255, 212],
  	"azure": [240, 255, 255],
  	"beige": [245, 245, 220],
  	"bisque": [255, 228, 196],
  	"black": [0, 0, 0],
  	"blanchedalmond": [255, 235, 205],
  	"blue": [0, 0, 255],
  	"blueviolet": [138, 43, 226],
  	"brown": [165, 42, 42],
  	"burlywood": [222, 184, 135],
  	"cadetblue": [95, 158, 160],
  	"chartreuse": [127, 255, 0],
  	"chocolate": [210, 105, 30],
  	"coral": [255, 127, 80],
  	"cornflowerblue": [100, 149, 237],
  	"cornsilk": [255, 248, 220],
  	"crimson": [220, 20, 60],
  	"cyan": [0, 255, 255],
  	"darkblue": [0, 0, 139],
  	"darkcyan": [0, 139, 139],
  	"darkgoldenrod": [184, 134, 11],
  	"darkgray": [169, 169, 169],
  	"darkgreen": [0, 100, 0],
  	"darkgrey": [169, 169, 169],
  	"darkkhaki": [189, 183, 107],
  	"darkmagenta": [139, 0, 139],
  	"darkolivegreen": [85, 107, 47],
  	"darkorange": [255, 140, 0],
  	"darkorchid": [153, 50, 204],
  	"darkred": [139, 0, 0],
  	"darksalmon": [233, 150, 122],
  	"darkseagreen": [143, 188, 143],
  	"darkslateblue": [72, 61, 139],
  	"darkslategray": [47, 79, 79],
  	"darkslategrey": [47, 79, 79],
  	"darkturquoise": [0, 206, 209],
  	"darkviolet": [148, 0, 211],
  	"deeppink": [255, 20, 147],
  	"deepskyblue": [0, 191, 255],
  	"dimgray": [105, 105, 105],
  	"dimgrey": [105, 105, 105],
  	"dodgerblue": [30, 144, 255],
  	"firebrick": [178, 34, 34],
  	"floralwhite": [255, 250, 240],
  	"forestgreen": [34, 139, 34],
  	"fuchsia": [255, 0, 255],
  	"gainsboro": [220, 220, 220],
  	"ghostwhite": [248, 248, 255],
  	"gold": [255, 215, 0],
  	"goldenrod": [218, 165, 32],
  	"gray": [128, 128, 128],
  	"green": [0, 128, 0],
  	"greenyellow": [173, 255, 47],
  	"grey": [128, 128, 128],
  	"honeydew": [240, 255, 240],
  	"hotpink": [255, 105, 180],
  	"indianred": [205, 92, 92],
  	"indigo": [75, 0, 130],
  	"ivory": [255, 255, 240],
  	"khaki": [240, 230, 140],
  	"lavender": [230, 230, 250],
  	"lavenderblush": [255, 240, 245],
  	"lawngreen": [124, 252, 0],
  	"lemonchiffon": [255, 250, 205],
  	"lightblue": [173, 216, 230],
  	"lightcoral": [240, 128, 128],
  	"lightcyan": [224, 255, 255],
  	"lightgoldenrodyellow": [250, 250, 210],
  	"lightgray": [211, 211, 211],
  	"lightgreen": [144, 238, 144],
  	"lightgrey": [211, 211, 211],
  	"lightpink": [255, 182, 193],
  	"lightsalmon": [255, 160, 122],
  	"lightseagreen": [32, 178, 170],
  	"lightskyblue": [135, 206, 250],
  	"lightslategray": [119, 136, 153],
  	"lightslategrey": [119, 136, 153],
  	"lightsteelblue": [176, 196, 222],
  	"lightyellow": [255, 255, 224],
  	"lime": [0, 255, 0],
  	"limegreen": [50, 205, 50],
  	"linen": [250, 240, 230],
  	"magenta": [255, 0, 255],
  	"maroon": [128, 0, 0],
  	"mediumaquamarine": [102, 205, 170],
  	"mediumblue": [0, 0, 205],
  	"mediumorchid": [186, 85, 211],
  	"mediumpurple": [147, 112, 219],
  	"mediumseagreen": [60, 179, 113],
  	"mediumslateblue": [123, 104, 238],
  	"mediumspringgreen": [0, 250, 154],
  	"mediumturquoise": [72, 209, 204],
  	"mediumvioletred": [199, 21, 133],
  	"midnightblue": [25, 25, 112],
  	"mintcream": [245, 255, 250],
  	"mistyrose": [255, 228, 225],
  	"moccasin": [255, 228, 181],
  	"navajowhite": [255, 222, 173],
  	"navy": [0, 0, 128],
  	"oldlace": [253, 245, 230],
  	"olive": [128, 128, 0],
  	"olivedrab": [107, 142, 35],
  	"orange": [255, 165, 0],
  	"orangered": [255, 69, 0],
  	"orchid": [218, 112, 214],
  	"palegoldenrod": [238, 232, 170],
  	"palegreen": [152, 251, 152],
  	"paleturquoise": [175, 238, 238],
  	"palevioletred": [219, 112, 147],
  	"papayawhip": [255, 239, 213],
  	"peachpuff": [255, 218, 185],
  	"peru": [205, 133, 63],
  	"pink": [255, 192, 203],
  	"plum": [221, 160, 221],
  	"powderblue": [176, 224, 230],
  	"purple": [128, 0, 128],
  	"rebeccapurple": [102, 51, 153],
  	"red": [255, 0, 0],
  	"rosybrown": [188, 143, 143],
  	"royalblue": [65, 105, 225],
  	"saddlebrown": [139, 69, 19],
  	"salmon": [250, 128, 114],
  	"sandybrown": [244, 164, 96],
  	"seagreen": [46, 139, 87],
  	"seashell": [255, 245, 238],
  	"sienna": [160, 82, 45],
  	"silver": [192, 192, 192],
  	"skyblue": [135, 206, 235],
  	"slateblue": [106, 90, 205],
  	"slategray": [112, 128, 144],
  	"slategrey": [112, 128, 144],
  	"snow": [255, 250, 250],
  	"springgreen": [0, 255, 127],
  	"steelblue": [70, 130, 180],
  	"tan": [210, 180, 140],
  	"teal": [0, 128, 128],
  	"thistle": [216, 191, 216],
  	"tomato": [255, 99, 71],
  	"turquoise": [64, 224, 208],
  	"violet": [238, 130, 238],
  	"wheat": [245, 222, 179],
  	"white": [255, 255, 255],
  	"whitesmoke": [245, 245, 245],
  	"yellow": [255, 255, 0],
  	"yellowgreen": [154, 205, 50]
  };

  var conversions = createCommonjsModule(function (module) {
  /* MIT license */


  // NOTE: conversions should only return primitive values (i.e. arrays, or
  //       values that give correct `typeof` results).
  //       do not use box values types (i.e. Number(), String(), etc.)

  var reverseKeywords = {};
  for (var key in colorName) {
  	if (colorName.hasOwnProperty(key)) {
  		reverseKeywords[colorName[key]] = key;
  	}
  }

  var convert = module.exports = {
  	rgb: {channels: 3, labels: 'rgb'},
  	hsl: {channels: 3, labels: 'hsl'},
  	hsv: {channels: 3, labels: 'hsv'},
  	hwb: {channels: 3, labels: 'hwb'},
  	cmyk: {channels: 4, labels: 'cmyk'},
  	xyz: {channels: 3, labels: 'xyz'},
  	lab: {channels: 3, labels: 'lab'},
  	lch: {channels: 3, labels: 'lch'},
  	hex: {channels: 1, labels: ['hex']},
  	keyword: {channels: 1, labels: ['keyword']},
  	ansi16: {channels: 1, labels: ['ansi16']},
  	ansi256: {channels: 1, labels: ['ansi256']},
  	hcg: {channels: 3, labels: ['h', 'c', 'g']},
  	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
  	gray: {channels: 1, labels: ['gray']}
  };

  // hide .channels and .labels properties
  for (var model in convert) {
  	if (convert.hasOwnProperty(model)) {
  		if (!('channels' in convert[model])) {
  			throw new Error('missing channels property: ' + model);
  		}

  		if (!('labels' in convert[model])) {
  			throw new Error('missing channel labels property: ' + model);
  		}

  		if (convert[model].labels.length !== convert[model].channels) {
  			throw new Error('channel and label counts mismatch: ' + model);
  		}

  		var channels = convert[model].channels;
  		var labels = convert[model].labels;
  		delete convert[model].channels;
  		delete convert[model].labels;
  		Object.defineProperty(convert[model], 'channels', {value: channels});
  		Object.defineProperty(convert[model], 'labels', {value: labels});
  	}
  }

  convert.rgb.hsl = function (rgb) {
  	var r = rgb[0] / 255;
  	var g = rgb[1] / 255;
  	var b = rgb[2] / 255;
  	var min = Math.min(r, g, b);
  	var max = Math.max(r, g, b);
  	var delta = max - min;
  	var h;
  	var s;
  	var l;

  	if (max === min) {
  		h = 0;
  	} else if (r === max) {
  		h = (g - b) / delta;
  	} else if (g === max) {
  		h = 2 + (b - r) / delta;
  	} else if (b === max) {
  		h = 4 + (r - g) / delta;
  	}

  	h = Math.min(h * 60, 360);

  	if (h < 0) {
  		h += 360;
  	}

  	l = (min + max) / 2;

  	if (max === min) {
  		s = 0;
  	} else if (l <= 0.5) {
  		s = delta / (max + min);
  	} else {
  		s = delta / (2 - max - min);
  	}

  	return [h, s * 100, l * 100];
  };

  convert.rgb.hsv = function (rgb) {
  	var rdif;
  	var gdif;
  	var bdif;
  	var h;
  	var s;

  	var r = rgb[0] / 255;
  	var g = rgb[1] / 255;
  	var b = rgb[2] / 255;
  	var v = Math.max(r, g, b);
  	var diff = v - Math.min(r, g, b);
  	var diffc = function (c) {
  		return (v - c) / 6 / diff + 1 / 2;
  	};

  	if (diff === 0) {
  		h = s = 0;
  	} else {
  		s = diff / v;
  		rdif = diffc(r);
  		gdif = diffc(g);
  		bdif = diffc(b);

  		if (r === v) {
  			h = bdif - gdif;
  		} else if (g === v) {
  			h = (1 / 3) + rdif - bdif;
  		} else if (b === v) {
  			h = (2 / 3) + gdif - rdif;
  		}
  		if (h < 0) {
  			h += 1;
  		} else if (h > 1) {
  			h -= 1;
  		}
  	}

  	return [
  		h * 360,
  		s * 100,
  		v * 100
  	];
  };

  convert.rgb.hwb = function (rgb) {
  	var r = rgb[0];
  	var g = rgb[1];
  	var b = rgb[2];
  	var h = convert.rgb.hsl(rgb)[0];
  	var w = 1 / 255 * Math.min(r, Math.min(g, b));

  	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

  	return [h, w * 100, b * 100];
  };

  convert.rgb.cmyk = function (rgb) {
  	var r = rgb[0] / 255;
  	var g = rgb[1] / 255;
  	var b = rgb[2] / 255;
  	var c;
  	var m;
  	var y;
  	var k;

  	k = Math.min(1 - r, 1 - g, 1 - b);
  	c = (1 - r - k) / (1 - k) || 0;
  	m = (1 - g - k) / (1 - k) || 0;
  	y = (1 - b - k) / (1 - k) || 0;

  	return [c * 100, m * 100, y * 100, k * 100];
  };

  /**
   * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
   * */
  function comparativeDistance(x, y) {
  	return (
  		Math.pow(x[0] - y[0], 2) +
  		Math.pow(x[1] - y[1], 2) +
  		Math.pow(x[2] - y[2], 2)
  	);
  }

  convert.rgb.keyword = function (rgb) {
  	var reversed = reverseKeywords[rgb];
  	if (reversed) {
  		return reversed;
  	}

  	var currentClosestDistance = Infinity;
  	var currentClosestKeyword;

  	for (var keyword in colorName) {
  		if (colorName.hasOwnProperty(keyword)) {
  			var value = colorName[keyword];

  			// Compute comparative distance
  			var distance = comparativeDistance(rgb, value);

  			// Check if its less, if so set as closest
  			if (distance < currentClosestDistance) {
  				currentClosestDistance = distance;
  				currentClosestKeyword = keyword;
  			}
  		}
  	}

  	return currentClosestKeyword;
  };

  convert.keyword.rgb = function (keyword) {
  	return colorName[keyword];
  };

  convert.rgb.xyz = function (rgb) {
  	var r = rgb[0] / 255;
  	var g = rgb[1] / 255;
  	var b = rgb[2] / 255;

  	// assume sRGB
  	r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
  	g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
  	b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

  	var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
  	var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
  	var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

  	return [x * 100, y * 100, z * 100];
  };

  convert.rgb.lab = function (rgb) {
  	var xyz = convert.rgb.xyz(rgb);
  	var x = xyz[0];
  	var y = xyz[1];
  	var z = xyz[2];
  	var l;
  	var a;
  	var b;

  	x /= 95.047;
  	y /= 100;
  	z /= 108.883;

  	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
  	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
  	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

  	l = (116 * y) - 16;
  	a = 500 * (x - y);
  	b = 200 * (y - z);

  	return [l, a, b];
  };

  convert.hsl.rgb = function (hsl) {
  	var h = hsl[0] / 360;
  	var s = hsl[1] / 100;
  	var l = hsl[2] / 100;
  	var t1;
  	var t2;
  	var t3;
  	var rgb;
  	var val;

  	if (s === 0) {
  		val = l * 255;
  		return [val, val, val];
  	}

  	if (l < 0.5) {
  		t2 = l * (1 + s);
  	} else {
  		t2 = l + s - l * s;
  	}

  	t1 = 2 * l - t2;

  	rgb = [0, 0, 0];
  	for (var i = 0; i < 3; i++) {
  		t3 = h + 1 / 3 * -(i - 1);
  		if (t3 < 0) {
  			t3++;
  		}
  		if (t3 > 1) {
  			t3--;
  		}

  		if (6 * t3 < 1) {
  			val = t1 + (t2 - t1) * 6 * t3;
  		} else if (2 * t3 < 1) {
  			val = t2;
  		} else if (3 * t3 < 2) {
  			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
  		} else {
  			val = t1;
  		}

  		rgb[i] = val * 255;
  	}

  	return rgb;
  };

  convert.hsl.hsv = function (hsl) {
  	var h = hsl[0];
  	var s = hsl[1] / 100;
  	var l = hsl[2] / 100;
  	var smin = s;
  	var lmin = Math.max(l, 0.01);
  	var sv;
  	var v;

  	l *= 2;
  	s *= (l <= 1) ? l : 2 - l;
  	smin *= lmin <= 1 ? lmin : 2 - lmin;
  	v = (l + s) / 2;
  	sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

  	return [h, sv * 100, v * 100];
  };

  convert.hsv.rgb = function (hsv) {
  	var h = hsv[0] / 60;
  	var s = hsv[1] / 100;
  	var v = hsv[2] / 100;
  	var hi = Math.floor(h) % 6;

  	var f = h - Math.floor(h);
  	var p = 255 * v * (1 - s);
  	var q = 255 * v * (1 - (s * f));
  	var t = 255 * v * (1 - (s * (1 - f)));
  	v *= 255;

  	switch (hi) {
  		case 0:
  			return [v, t, p];
  		case 1:
  			return [q, v, p];
  		case 2:
  			return [p, v, t];
  		case 3:
  			return [p, q, v];
  		case 4:
  			return [t, p, v];
  		case 5:
  			return [v, p, q];
  	}
  };

  convert.hsv.hsl = function (hsv) {
  	var h = hsv[0];
  	var s = hsv[1] / 100;
  	var v = hsv[2] / 100;
  	var vmin = Math.max(v, 0.01);
  	var lmin;
  	var sl;
  	var l;

  	l = (2 - s) * v;
  	lmin = (2 - s) * vmin;
  	sl = s * vmin;
  	sl /= (lmin <= 1) ? lmin : 2 - lmin;
  	sl = sl || 0;
  	l /= 2;

  	return [h, sl * 100, l * 100];
  };

  // http://dev.w3.org/csswg/css-color/#hwb-to-rgb
  convert.hwb.rgb = function (hwb) {
  	var h = hwb[0] / 360;
  	var wh = hwb[1] / 100;
  	var bl = hwb[2] / 100;
  	var ratio = wh + bl;
  	var i;
  	var v;
  	var f;
  	var n;

  	// wh + bl cant be > 1
  	if (ratio > 1) {
  		wh /= ratio;
  		bl /= ratio;
  	}

  	i = Math.floor(6 * h);
  	v = 1 - bl;
  	f = 6 * h - i;

  	if ((i & 0x01) !== 0) {
  		f = 1 - f;
  	}

  	n = wh + f * (v - wh); // linear interpolation

  	var r;
  	var g;
  	var b;
  	switch (i) {
  		default:
  		case 6:
  		case 0: r = v; g = n; b = wh; break;
  		case 1: r = n; g = v; b = wh; break;
  		case 2: r = wh; g = v; b = n; break;
  		case 3: r = wh; g = n; b = v; break;
  		case 4: r = n; g = wh; b = v; break;
  		case 5: r = v; g = wh; b = n; break;
  	}

  	return [r * 255, g * 255, b * 255];
  };

  convert.cmyk.rgb = function (cmyk) {
  	var c = cmyk[0] / 100;
  	var m = cmyk[1] / 100;
  	var y = cmyk[2] / 100;
  	var k = cmyk[3] / 100;
  	var r;
  	var g;
  	var b;

  	r = 1 - Math.min(1, c * (1 - k) + k);
  	g = 1 - Math.min(1, m * (1 - k) + k);
  	b = 1 - Math.min(1, y * (1 - k) + k);

  	return [r * 255, g * 255, b * 255];
  };

  convert.xyz.rgb = function (xyz) {
  	var x = xyz[0] / 100;
  	var y = xyz[1] / 100;
  	var z = xyz[2] / 100;
  	var r;
  	var g;
  	var b;

  	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
  	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
  	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

  	// assume sRGB
  	r = r > 0.0031308
  		? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
  		: r * 12.92;

  	g = g > 0.0031308
  		? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
  		: g * 12.92;

  	b = b > 0.0031308
  		? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
  		: b * 12.92;

  	r = Math.min(Math.max(0, r), 1);
  	g = Math.min(Math.max(0, g), 1);
  	b = Math.min(Math.max(0, b), 1);

  	return [r * 255, g * 255, b * 255];
  };

  convert.xyz.lab = function (xyz) {
  	var x = xyz[0];
  	var y = xyz[1];
  	var z = xyz[2];
  	var l;
  	var a;
  	var b;

  	x /= 95.047;
  	y /= 100;
  	z /= 108.883;

  	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
  	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
  	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

  	l = (116 * y) - 16;
  	a = 500 * (x - y);
  	b = 200 * (y - z);

  	return [l, a, b];
  };

  convert.lab.xyz = function (lab) {
  	var l = lab[0];
  	var a = lab[1];
  	var b = lab[2];
  	var x;
  	var y;
  	var z;

  	y = (l + 16) / 116;
  	x = a / 500 + y;
  	z = y - b / 200;

  	var y2 = Math.pow(y, 3);
  	var x2 = Math.pow(x, 3);
  	var z2 = Math.pow(z, 3);
  	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
  	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
  	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

  	x *= 95.047;
  	y *= 100;
  	z *= 108.883;

  	return [x, y, z];
  };

  convert.lab.lch = function (lab) {
  	var l = lab[0];
  	var a = lab[1];
  	var b = lab[2];
  	var hr;
  	var h;
  	var c;

  	hr = Math.atan2(b, a);
  	h = hr * 360 / 2 / Math.PI;

  	if (h < 0) {
  		h += 360;
  	}

  	c = Math.sqrt(a * a + b * b);

  	return [l, c, h];
  };

  convert.lch.lab = function (lch) {
  	var l = lch[0];
  	var c = lch[1];
  	var h = lch[2];
  	var a;
  	var b;
  	var hr;

  	hr = h / 360 * 2 * Math.PI;
  	a = c * Math.cos(hr);
  	b = c * Math.sin(hr);

  	return [l, a, b];
  };

  convert.rgb.ansi16 = function (args) {
  	var r = args[0];
  	var g = args[1];
  	var b = args[2];
  	var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

  	value = Math.round(value / 50);

  	if (value === 0) {
  		return 30;
  	}

  	var ansi = 30
  		+ ((Math.round(b / 255) << 2)
  		| (Math.round(g / 255) << 1)
  		| Math.round(r / 255));

  	if (value === 2) {
  		ansi += 60;
  	}

  	return ansi;
  };

  convert.hsv.ansi16 = function (args) {
  	// optimization here; we already know the value and don't need to get
  	// it converted for us.
  	return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
  };

  convert.rgb.ansi256 = function (args) {
  	var r = args[0];
  	var g = args[1];
  	var b = args[2];

  	// we use the extended greyscale palette here, with the exception of
  	// black and white. normal palette only has 4 greyscale shades.
  	if (r === g && g === b) {
  		if (r < 8) {
  			return 16;
  		}

  		if (r > 248) {
  			return 231;
  		}

  		return Math.round(((r - 8) / 247) * 24) + 232;
  	}

  	var ansi = 16
  		+ (36 * Math.round(r / 255 * 5))
  		+ (6 * Math.round(g / 255 * 5))
  		+ Math.round(b / 255 * 5);

  	return ansi;
  };

  convert.ansi16.rgb = function (args) {
  	var color = args % 10;

  	// handle greyscale
  	if (color === 0 || color === 7) {
  		if (args > 50) {
  			color += 3.5;
  		}

  		color = color / 10.5 * 255;

  		return [color, color, color];
  	}

  	var mult = (~~(args > 50) + 1) * 0.5;
  	var r = ((color & 1) * mult) * 255;
  	var g = (((color >> 1) & 1) * mult) * 255;
  	var b = (((color >> 2) & 1) * mult) * 255;

  	return [r, g, b];
  };

  convert.ansi256.rgb = function (args) {
  	// handle greyscale
  	if (args >= 232) {
  		var c = (args - 232) * 10 + 8;
  		return [c, c, c];
  	}

  	args -= 16;

  	var rem;
  	var r = Math.floor(args / 36) / 5 * 255;
  	var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
  	var b = (rem % 6) / 5 * 255;

  	return [r, g, b];
  };

  convert.rgb.hex = function (args) {
  	var integer = ((Math.round(args[0]) & 0xFF) << 16)
  		+ ((Math.round(args[1]) & 0xFF) << 8)
  		+ (Math.round(args[2]) & 0xFF);

  	var string = integer.toString(16).toUpperCase();
  	return '000000'.substring(string.length) + string;
  };

  convert.hex.rgb = function (args) {
  	var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
  	if (!match) {
  		return [0, 0, 0];
  	}

  	var colorString = match[0];

  	if (match[0].length === 3) {
  		colorString = colorString.split('').map(function (char) {
  			return char + char;
  		}).join('');
  	}

  	var integer = parseInt(colorString, 16);
  	var r = (integer >> 16) & 0xFF;
  	var g = (integer >> 8) & 0xFF;
  	var b = integer & 0xFF;

  	return [r, g, b];
  };

  convert.rgb.hcg = function (rgb) {
  	var r = rgb[0] / 255;
  	var g = rgb[1] / 255;
  	var b = rgb[2] / 255;
  	var max = Math.max(Math.max(r, g), b);
  	var min = Math.min(Math.min(r, g), b);
  	var chroma = (max - min);
  	var grayscale;
  	var hue;

  	if (chroma < 1) {
  		grayscale = min / (1 - chroma);
  	} else {
  		grayscale = 0;
  	}

  	if (chroma <= 0) {
  		hue = 0;
  	} else
  	if (max === r) {
  		hue = ((g - b) / chroma) % 6;
  	} else
  	if (max === g) {
  		hue = 2 + (b - r) / chroma;
  	} else {
  		hue = 4 + (r - g) / chroma + 4;
  	}

  	hue /= 6;
  	hue %= 1;

  	return [hue * 360, chroma * 100, grayscale * 100];
  };

  convert.hsl.hcg = function (hsl) {
  	var s = hsl[1] / 100;
  	var l = hsl[2] / 100;
  	var c = 1;
  	var f = 0;

  	if (l < 0.5) {
  		c = 2.0 * s * l;
  	} else {
  		c = 2.0 * s * (1.0 - l);
  	}

  	if (c < 1.0) {
  		f = (l - 0.5 * c) / (1.0 - c);
  	}

  	return [hsl[0], c * 100, f * 100];
  };

  convert.hsv.hcg = function (hsv) {
  	var s = hsv[1] / 100;
  	var v = hsv[2] / 100;

  	var c = s * v;
  	var f = 0;

  	if (c < 1.0) {
  		f = (v - c) / (1 - c);
  	}

  	return [hsv[0], c * 100, f * 100];
  };

  convert.hcg.rgb = function (hcg) {
  	var h = hcg[0] / 360;
  	var c = hcg[1] / 100;
  	var g = hcg[2] / 100;

  	if (c === 0.0) {
  		return [g * 255, g * 255, g * 255];
  	}

  	var pure = [0, 0, 0];
  	var hi = (h % 1) * 6;
  	var v = hi % 1;
  	var w = 1 - v;
  	var mg = 0;

  	switch (Math.floor(hi)) {
  		case 0:
  			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
  		case 1:
  			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
  		case 2:
  			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
  		case 3:
  			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
  		case 4:
  			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
  		default:
  			pure[0] = 1; pure[1] = 0; pure[2] = w;
  	}

  	mg = (1.0 - c) * g;

  	return [
  		(c * pure[0] + mg) * 255,
  		(c * pure[1] + mg) * 255,
  		(c * pure[2] + mg) * 255
  	];
  };

  convert.hcg.hsv = function (hcg) {
  	var c = hcg[1] / 100;
  	var g = hcg[2] / 100;

  	var v = c + g * (1.0 - c);
  	var f = 0;

  	if (v > 0.0) {
  		f = c / v;
  	}

  	return [hcg[0], f * 100, v * 100];
  };

  convert.hcg.hsl = function (hcg) {
  	var c = hcg[1] / 100;
  	var g = hcg[2] / 100;

  	var l = g * (1.0 - c) + 0.5 * c;
  	var s = 0;

  	if (l > 0.0 && l < 0.5) {
  		s = c / (2 * l);
  	} else
  	if (l >= 0.5 && l < 1.0) {
  		s = c / (2 * (1 - l));
  	}

  	return [hcg[0], s * 100, l * 100];
  };

  convert.hcg.hwb = function (hcg) {
  	var c = hcg[1] / 100;
  	var g = hcg[2] / 100;
  	var v = c + g * (1.0 - c);
  	return [hcg[0], (v - c) * 100, (1 - v) * 100];
  };

  convert.hwb.hcg = function (hwb) {
  	var w = hwb[1] / 100;
  	var b = hwb[2] / 100;
  	var v = 1 - b;
  	var c = v - w;
  	var g = 0;

  	if (c < 1) {
  		g = (v - c) / (1 - c);
  	}

  	return [hwb[0], c * 100, g * 100];
  };

  convert.apple.rgb = function (apple) {
  	return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
  };

  convert.rgb.apple = function (rgb) {
  	return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
  };

  convert.gray.rgb = function (args) {
  	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
  };

  convert.gray.hsl = convert.gray.hsv = function (args) {
  	return [0, 0, args[0]];
  };

  convert.gray.hwb = function (gray) {
  	return [0, 100, gray[0]];
  };

  convert.gray.cmyk = function (gray) {
  	return [0, 0, 0, gray[0]];
  };

  convert.gray.lab = function (gray) {
  	return [gray[0], 0, 0];
  };

  convert.gray.hex = function (gray) {
  	var val = Math.round(gray[0] / 100 * 255) & 0xFF;
  	var integer = (val << 16) + (val << 8) + val;

  	var string = integer.toString(16).toUpperCase();
  	return '000000'.substring(string.length) + string;
  };

  convert.rgb.gray = function (rgb) {
  	var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
  	return [val / 255 * 100];
  };
  });
  var conversions_1 = conversions.rgb;
  var conversions_2 = conversions.hsl;
  var conversions_3 = conversions.hsv;
  var conversions_4 = conversions.hwb;
  var conversions_5 = conversions.cmyk;
  var conversions_6 = conversions.xyz;
  var conversions_7 = conversions.lab;
  var conversions_8 = conversions.lch;
  var conversions_9 = conversions.hex;
  var conversions_10 = conversions.keyword;
  var conversions_11 = conversions.ansi16;
  var conversions_12 = conversions.ansi256;
  var conversions_13 = conversions.hcg;
  var conversions_14 = conversions.apple;
  var conversions_15 = conversions.gray;

  /*
  	this function routes a model to all other models.

  	all functions that are routed have a property `.conversion` attached
  	to the returned synthetic function. This property is an array
  	of strings, each with the steps in between the 'from' and 'to'
  	color models (inclusive).

  	conversions that are not possible simply are not included.
  */

  function buildGraph() {
  	var graph = {};
  	// https://jsperf.com/object-keys-vs-for-in-with-closure/3
  	var models = Object.keys(conversions);

  	for (var len = models.length, i = 0; i < len; i++) {
  		graph[models[i]] = {
  			// http://jsperf.com/1-vs-infinity
  			// micro-opt, but this is simple.
  			distance: -1,
  			parent: null
  		};
  	}

  	return graph;
  }

  // https://en.wikipedia.org/wiki/Breadth-first_search
  function deriveBFS(fromModel) {
  	var graph = buildGraph();
  	var queue = [fromModel]; // unshift -> queue -> pop

  	graph[fromModel].distance = 0;

  	while (queue.length) {
  		var current = queue.pop();
  		var adjacents = Object.keys(conversions[current]);

  		for (var len = adjacents.length, i = 0; i < len; i++) {
  			var adjacent = adjacents[i];
  			var node = graph[adjacent];

  			if (node.distance === -1) {
  				node.distance = graph[current].distance + 1;
  				node.parent = current;
  				queue.unshift(adjacent);
  			}
  		}
  	}

  	return graph;
  }

  function link(from, to) {
  	return function (args) {
  		return to(from(args));
  	};
  }

  function wrapConversion(toModel, graph) {
  	var path = [graph[toModel].parent, toModel];
  	var fn = conversions[graph[toModel].parent][toModel];

  	var cur = graph[toModel].parent;
  	while (graph[cur].parent) {
  		path.unshift(graph[cur].parent);
  		fn = link(conversions[graph[cur].parent][cur], fn);
  		cur = graph[cur].parent;
  	}

  	fn.conversion = path;
  	return fn;
  }

  var route = function (fromModel) {
  	var graph = deriveBFS(fromModel);
  	var conversion = {};

  	var models = Object.keys(graph);
  	for (var len = models.length, i = 0; i < len; i++) {
  		var toModel = models[i];
  		var node = graph[toModel];

  		if (node.parent === null) {
  			// no possible conversion, or this node is the source model.
  			continue;
  		}

  		conversion[toModel] = wrapConversion(toModel, graph);
  	}

  	return conversion;
  };

  var convert = {};

  var models = Object.keys(conversions);

  function wrapRaw(fn) {
  	var wrappedFn = function (args) {
  		if (args === undefined || args === null) {
  			return args;
  		}

  		if (arguments.length > 1) {
  			args = Array.prototype.slice.call(arguments);
  		}

  		return fn(args);
  	};

  	// preserve .conversion property if there is one
  	if ('conversion' in fn) {
  		wrappedFn.conversion = fn.conversion;
  	}

  	return wrappedFn;
  }

  function wrapRounded(fn) {
  	var wrappedFn = function (args) {
  		if (args === undefined || args === null) {
  			return args;
  		}

  		if (arguments.length > 1) {
  			args = Array.prototype.slice.call(arguments);
  		}

  		var result = fn(args);

  		// we're assuming the result is an array here.
  		// see notice in conversions.js; don't use box types
  		// in conversion functions.
  		if (typeof result === 'object') {
  			for (var len = result.length, i = 0; i < len; i++) {
  				result[i] = Math.round(result[i]);
  			}
  		}

  		return result;
  	};

  	// preserve .conversion property if there is one
  	if ('conversion' in fn) {
  		wrappedFn.conversion = fn.conversion;
  	}

  	return wrappedFn;
  }

  models.forEach(function (fromModel) {
  	convert[fromModel] = {};

  	Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
  	Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

  	var routes = route(fromModel);
  	var routeModels = Object.keys(routes);

  	routeModels.forEach(function (toModel) {
  		var fn = routes[toModel];

  		convert[fromModel][toModel] = wrapRounded(fn);
  		convert[fromModel][toModel].raw = wrapRaw(fn);
  	});
  });

  var colorConvert = convert;

  var ansiStyles = createCommonjsModule(function (module) {


  const wrapAnsi16 = (fn, offset) => function () {
  	const code = fn.apply(colorConvert, arguments);
  	return `\u001B[${code + offset}m`;
  };

  const wrapAnsi256 = (fn, offset) => function () {
  	const code = fn.apply(colorConvert, arguments);
  	return `\u001B[${38 + offset};5;${code}m`;
  };

  const wrapAnsi16m = (fn, offset) => function () {
  	const rgb = fn.apply(colorConvert, arguments);
  	return `\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
  };

  function assembleStyles() {
  	const codes = new Map();
  	const styles = {
  		modifier: {
  			reset: [0, 0],
  			// 21 isn't widely supported and 22 does the same thing
  			bold: [1, 22],
  			dim: [2, 22],
  			italic: [3, 23],
  			underline: [4, 24],
  			inverse: [7, 27],
  			hidden: [8, 28],
  			strikethrough: [9, 29]
  		},
  		color: {
  			black: [30, 39],
  			red: [31, 39],
  			green: [32, 39],
  			yellow: [33, 39],
  			blue: [34, 39],
  			magenta: [35, 39],
  			cyan: [36, 39],
  			white: [37, 39],
  			gray: [90, 39],

  			// Bright color
  			redBright: [91, 39],
  			greenBright: [92, 39],
  			yellowBright: [93, 39],
  			blueBright: [94, 39],
  			magentaBright: [95, 39],
  			cyanBright: [96, 39],
  			whiteBright: [97, 39]
  		},
  		bgColor: {
  			bgBlack: [40, 49],
  			bgRed: [41, 49],
  			bgGreen: [42, 49],
  			bgYellow: [43, 49],
  			bgBlue: [44, 49],
  			bgMagenta: [45, 49],
  			bgCyan: [46, 49],
  			bgWhite: [47, 49],

  			// Bright color
  			bgBlackBright: [100, 49],
  			bgRedBright: [101, 49],
  			bgGreenBright: [102, 49],
  			bgYellowBright: [103, 49],
  			bgBlueBright: [104, 49],
  			bgMagentaBright: [105, 49],
  			bgCyanBright: [106, 49],
  			bgWhiteBright: [107, 49]
  		}
  	};

  	// Fix humans
  	styles.color.grey = styles.color.gray;

  	for (const groupName of Object.keys(styles)) {
  		const group = styles[groupName];

  		for (const styleName of Object.keys(group)) {
  			const style = group[styleName];

  			styles[styleName] = {
  				open: `\u001B[${style[0]}m`,
  				close: `\u001B[${style[1]}m`
  			};

  			group[styleName] = styles[styleName];

  			codes.set(style[0], style[1]);
  		}

  		Object.defineProperty(styles, groupName, {
  			value: group,
  			enumerable: false
  		});

  		Object.defineProperty(styles, 'codes', {
  			value: codes,
  			enumerable: false
  		});
  	}

  	const ansi2ansi = n => n;
  	const rgb2rgb = (r, g, b) => [r, g, b];

  	styles.color.close = '\u001B[39m';
  	styles.bgColor.close = '\u001B[49m';

  	styles.color.ansi = {
  		ansi: wrapAnsi16(ansi2ansi, 0)
  	};
  	styles.color.ansi256 = {
  		ansi256: wrapAnsi256(ansi2ansi, 0)
  	};
  	styles.color.ansi16m = {
  		rgb: wrapAnsi16m(rgb2rgb, 0)
  	};

  	styles.bgColor.ansi = {
  		ansi: wrapAnsi16(ansi2ansi, 10)
  	};
  	styles.bgColor.ansi256 = {
  		ansi256: wrapAnsi256(ansi2ansi, 10)
  	};
  	styles.bgColor.ansi16m = {
  		rgb: wrapAnsi16m(rgb2rgb, 10)
  	};

  	for (let key of Object.keys(colorConvert)) {
  		if (typeof colorConvert[key] !== 'object') {
  			continue;
  		}

  		const suite = colorConvert[key];

  		if (key === 'ansi16') {
  			key = 'ansi';
  		}

  		if ('ansi16' in suite) {
  			styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
  			styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
  		}

  		if ('ansi256' in suite) {
  			styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
  			styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
  		}

  		if ('rgb' in suite) {
  			styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
  			styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
  		}
  	}

  	return styles;
  }

  // Make the export immutable
  Object.defineProperty(module, 'exports', {
  	enumerable: true,
  	get: assembleStyles
  });
  });

  var collections = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.printIteratorEntries = printIteratorEntries;
  exports.printIteratorValues = printIteratorValues;
  exports.printListItems = printListItems;
  exports.printObjectProperties = printObjectProperties;


  const getSymbols = Object.getOwnPropertySymbols || (obj => []); /**
                                                                   * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
                                                                   *
                                                                   * This source code is licensed under the MIT license found in the
                                                                   * LICENSE file in the root directory of this source tree.
                                                                   *
                                                                   * 
                                                                   */

  const isSymbol = key =>
  // $FlowFixMe string literal `symbol`. This value is not a valid `typeof` return value
  typeof key === 'symbol' || toString.call(key) === '[object Symbol]';

  // Return entries (for example, of a map)
  // with spacing, indentation, and comma
  // without surrounding punctuation (for example, braces)
  function printIteratorEntries(
  // Flow 0.51.0: property `@@iterator` of $Iterator not found in Object
  // To allow simplistic getRecordIterator in immutable.js
  iterator, config, indentation, depth, refs, printer) {
    let separator = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : ': ';

    let result = '';
    let current = iterator.next();

    if (!current.done) {
      result += config.spacingOuter;

      const indentationNext = indentation + config.indent;

      while (!current.done) {
        const name = printer(current.value[0], config, indentationNext, depth, refs);
        const value = printer(current.value[1], config, indentationNext, depth, refs);

        result += indentationNext + name + separator + value;

        current = iterator.next();

        if (!current.done) {
          result += ',' + config.spacingInner;
        } else if (!config.min) {
          result += ',';
        }
      }

      result += config.spacingOuter + indentation;
    }

    return result;
  }

  // Return values (for example, of a set)
  // with spacing, indentation, and comma
  // without surrounding punctuation (braces or brackets)
  function printIteratorValues(iterator, config, indentation, depth, refs, printer) {
    let result = '';
    let current = iterator.next();

    if (!current.done) {
      result += config.spacingOuter;

      const indentationNext = indentation + config.indent;

      while (!current.done) {
        result += indentationNext + printer(current.value, config, indentationNext, depth, refs);

        current = iterator.next();

        if (!current.done) {
          result += ',' + config.spacingInner;
        } else if (!config.min) {
          result += ',';
        }
      }

      result += config.spacingOuter + indentation;
    }

    return result;
  }

  // Return items (for example, of an array)
  // with spacing, indentation, and comma
  // without surrounding punctuation (for example, brackets)
  function printListItems(list, config, indentation, depth, refs, printer) {
    let result = '';

    if (list.length) {
      result += config.spacingOuter;

      const indentationNext = indentation + config.indent;

      for (let i = 0; i < list.length; i++) {
        result += indentationNext + printer(list[i], config, indentationNext, depth, refs);

        if (i < list.length - 1) {
          result += ',' + config.spacingInner;
        } else if (!config.min) {
          result += ',';
        }
      }

      result += config.spacingOuter + indentation;
    }

    return result;
  }

  // Return properties of an object
  // with spacing, indentation, and comma
  // without surrounding punctuation (for example, braces)
  function printObjectProperties(val, config, indentation, depth, refs, printer) {
    let result = '';
    let keys = Object.keys(val).sort();
    const symbols = getSymbols(val);

    if (symbols.length) {
      keys = keys.filter(key => !isSymbol(key)).concat(symbols);
    }

    if (keys.length) {
      result += config.spacingOuter;

      const indentationNext = indentation + config.indent;

      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        const name = printer(key, config, indentationNext, depth, refs);
        const value = printer(val[key], config, indentationNext, depth, refs);

        result += indentationNext + name + ': ' + value;

        if (i < keys.length - 1) {
          result += ',' + config.spacingInner;
        } else if (!config.min) {
          result += ',';
        }
      }

      result += config.spacingOuter + indentation;
    }

    return result;
  }
  });

  unwrapExports(collections);
  var collections_1 = collections.printIteratorEntries;
  var collections_2 = collections.printIteratorValues;
  var collections_3 = collections.printListItems;
  var collections_4 = collections.printObjectProperties;

  var asymmetric_matcher = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.test = exports.serialize = undefined;



  /**
   * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */

  const asymmetricMatcher = Symbol.for('jest.asymmetricMatcher');
  const SPACE = ' ';

  const serialize = exports.serialize = (val, config, indentation, depth, refs, printer) => {
    const stringedValue = val.toString();

    if (stringedValue === 'ArrayContaining') {
      if (++depth > config.maxDepth) {
        return '[' + stringedValue + ']';
      }
      return stringedValue + SPACE + '[' + (0, collections.printListItems)(val.sample, config, indentation, depth, refs, printer) + ']';
    }

    if (stringedValue === 'ObjectContaining') {
      if (++depth > config.maxDepth) {
        return '[' + stringedValue + ']';
      }
      return stringedValue + SPACE + '{' + (0, collections.printObjectProperties)(val.sample, config, indentation, depth, refs, printer) + '}';
    }

    if (stringedValue === 'StringMatching') {
      return stringedValue + SPACE + printer(val.sample, config, indentation, depth, refs);
    }

    if (stringedValue === 'StringContaining') {
      return stringedValue + SPACE + printer(val.sample, config, indentation, depth, refs);
    }

    return val.toAsymmetricMatcher();
  };

  const test = exports.test = val => val && val.$$typeof === asymmetricMatcher;

  exports.default = { serialize, test };
  });

  unwrapExports(asymmetric_matcher);
  var asymmetric_matcher_1 = asymmetric_matcher.test;
  var asymmetric_matcher_2 = asymmetric_matcher.serialize;

  var ansiRegex = () => {
  	const pattern = [
  		'[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[a-zA-Z\\d]*)*)?\\u0007)',
  		'(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))'
  	].join('|');

  	return new RegExp(pattern, 'g');
  };

  var convert_ansi = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.serialize = exports.test = undefined;



  var _ansiRegex2 = _interopRequireDefault(ansiRegex);



  var _ansiStyles2 = _interopRequireDefault(ansiStyles);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  const toHumanReadableAnsi = text => {
    return text.replace((0, _ansiRegex2.default)(), (match, offset, string) => {
      switch (match) {
        case _ansiStyles2.default.red.close:
        case _ansiStyles2.default.green.close:
        case _ansiStyles2.default.cyan.close:
        case _ansiStyles2.default.gray.close:
        case _ansiStyles2.default.white.close:
        case _ansiStyles2.default.yellow.close:
        case _ansiStyles2.default.bgRed.close:
        case _ansiStyles2.default.bgGreen.close:
        case _ansiStyles2.default.bgYellow.close:
        case _ansiStyles2.default.inverse.close:
        case _ansiStyles2.default.dim.close:
        case _ansiStyles2.default.bold.close:
        case _ansiStyles2.default.reset.open:
        case _ansiStyles2.default.reset.close:
          return '</>';
        case _ansiStyles2.default.red.open:
          return '<red>';
        case _ansiStyles2.default.green.open:
          return '<green>';
        case _ansiStyles2.default.cyan.open:
          return '<cyan>';
        case _ansiStyles2.default.gray.open:
          return '<gray>';
        case _ansiStyles2.default.white.open:
          return '<white>';
        case _ansiStyles2.default.yellow.open:
          return '<yellow>';
        case _ansiStyles2.default.bgRed.open:
          return '<bgRed>';
        case _ansiStyles2.default.bgGreen.open:
          return '<bgGreen>';
        case _ansiStyles2.default.bgYellow.open:
          return '<bgYellow>';
        case _ansiStyles2.default.inverse.open:
          return '<inverse>';
        case _ansiStyles2.default.dim.open:
          return '<dim>';
        case _ansiStyles2.default.bold.open:
          return '<bold>';
        default:
          return '';
      }
    });
  }; /**
      * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
      *
      * This source code is licensed under the MIT license found in the
      * LICENSE file in the root directory of this source tree.
      *
      * 
      */

  const test = exports.test = val => typeof val === 'string' && val.match((0, _ansiRegex2.default)());

  const serialize = exports.serialize = (val, config, indentation, depth, refs, printer) => printer(toHumanReadableAnsi(val), config, indentation, depth, refs);

  exports.default = { serialize, test };
  });

  unwrapExports(convert_ansi);
  var convert_ansi_1 = convert_ansi.serialize;
  var convert_ansi_2 = convert_ansi.test;

  var dom_collection = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.serialize = exports.test = undefined;



  /**
   * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */

  const SPACE = ' ';

  const COLLECTION_NAMES = ['DOMStringMap', 'NamedNodeMap'];

  const test = exports.test = val => val && val.constructor && COLLECTION_NAMES.indexOf(val.constructor.name) !== -1;

  const convertCollectionToObject = collection => {
    let result = {};

    if (collection.constructor.name === 'NamedNodeMap') {
      for (let i = 0; i < collection.length; i++) {
        result[collection[i].name] = collection[i].value;
      }
    } else {
      result = Object.assign({}, collection);
    }

    return result;
  };

  const serialize = exports.serialize = (collection, config, indentation, depth, refs, printer) => {
    if (++depth > config.maxDepth) {
      return '[' + collection.constructor.name + ']';
    }

    return collection.constructor.name + SPACE + '{' + (0, collections.printObjectProperties)(convertCollectionToObject(collection), config, indentation, depth, refs, printer) + '}';
  };

  exports.default = { serialize, test };
  });

  unwrapExports(dom_collection);
  var dom_collection_1 = dom_collection.serialize;
  var dom_collection_2 = dom_collection.test;

  var escape_html = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = escapeHTML;
  /**
   * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */

  function escapeHTML(str) {
    return str.replace(/</g, '&lt;').replace(/>/g, '&gt;');
  }
  });

  unwrapExports(escape_html);

  var markup = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.printElementAsLeaf = exports.printElement = exports.printComment = exports.printText = exports.printChildren = exports.printProps = undefined;



  var _escape_html2 = _interopRequireDefault(escape_html);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  // Return empty string if keys is empty.
  /**
   * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */

  const printProps = exports.printProps = (keys, props, config, indentation, depth, refs, printer) => {
    const indentationNext = indentation + config.indent;
    const colors = config.colors;
    return keys.map(key => {
      const value = props[key];
      let printed = printer(value, config, indentationNext, depth, refs);

      if (typeof value !== 'string') {
        if (printed.indexOf('\n') !== -1) {
          printed = config.spacingOuter + indentationNext + printed + config.spacingOuter + indentation;
        }
        printed = '{' + printed + '}';
      }

      return config.spacingInner + indentation + colors.prop.open + key + colors.prop.close + '=' + colors.value.open + printed + colors.value.close;
    }).join('');
  };

  // Return empty string if children is empty.
  const printChildren = exports.printChildren = (children, config, indentation, depth, refs, printer) => {
    return children.map(child => config.spacingOuter + indentation + (typeof child === 'string' ? printText(child, config) : printer(child, config, indentation, depth, refs))).join('');
  };

  const printText = exports.printText = (text, config) => {
    const contentColor = config.colors.content;
    return contentColor.open + (0, _escape_html2.default)(text) + contentColor.close;
  };

  const printComment = exports.printComment = (comment, config) => {
    const commentColor = config.colors.comment;
    return commentColor.open + '<!--' + (0, _escape_html2.default)(comment) + '-->' + commentColor.close;
  };

  // Separate the functions to format props, children, and element,
  // so a plugin could override a particular function, if needed.
  // Too bad, so sad: the traditional (but unnecessary) space
  // in a self-closing tagColor requires a second test of printedProps.
  const printElement = exports.printElement = (type, printedProps, printedChildren, config, indentation) => {
    const tagColor = config.colors.tag;
    return tagColor.open + '<' + type + (printedProps && tagColor.close + printedProps + config.spacingOuter + indentation + tagColor.open) + (printedChildren ? '>' + tagColor.close + printedChildren + config.spacingOuter + indentation + tagColor.open + '</' + type : (printedProps && !config.min ? '' : ' ') + '/') + '>' + tagColor.close;
  };

  const printElementAsLeaf = exports.printElementAsLeaf = (type, config) => {
    const tagColor = config.colors.tag;
    return tagColor.open + '<' + type + tagColor.close + ' …' + tagColor.open + ' />' + tagColor.close;
  };
  });

  unwrapExports(markup);
  var markup_1 = markup.printElementAsLeaf;
  var markup_2 = markup.printElement;
  var markup_3 = markup.printComment;
  var markup_4 = markup.printText;
  var markup_5 = markup.printChildren;
  var markup_6 = markup.printProps;

  var dom_element = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.serialize = exports.test = undefined;



  /**
   * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */

  const ELEMENT_NODE = 1;
  const TEXT_NODE = 3;
  const COMMENT_NODE = 8;

  const ELEMENT_REGEXP = /^((HTML|SVG)\w*)?Element$/;

  const testNode = (nodeType, name) => nodeType === ELEMENT_NODE && ELEMENT_REGEXP.test(name) || nodeType === TEXT_NODE && name === 'Text' || nodeType === COMMENT_NODE && name === 'Comment';

  const test = exports.test = val => val && val.constructor && val.constructor.name && testNode(val.nodeType, val.constructor.name);

  // Convert array of attribute objects to keys array and props object.
  const keysMapper = attribute => attribute.name;
  const propsReducer = (props, attribute) => {
    props[attribute.name] = attribute.value;
    return props;
  };

  const serialize = exports.serialize = (node, config, indentation, depth, refs, printer) => {
    if (node.nodeType === TEXT_NODE) {
      return (0, markup.printText)(node.data, config);
    }

    if (node.nodeType === COMMENT_NODE) {
      return (0, markup.printComment)(node.data, config);
    }

    const type = node.tagName.toLowerCase();
    if (++depth > config.maxDepth) {
      return (0, markup.printElementAsLeaf)(type, config);
    }

    return (0, markup.printElement)(type, (0, markup.printProps)(Array.prototype.map.call(node.attributes, keysMapper).sort(), Array.prototype.reduce.call(node.attributes, propsReducer, {}), config, indentation + config.indent, depth, refs, printer), (0, markup.printChildren)(Array.prototype.slice.call(node.childNodes), config, indentation + config.indent, depth, refs, printer), config, indentation);
  };

  exports.default = { serialize, test };
  });

  unwrapExports(dom_element);
  var dom_element_1 = dom_element.serialize;
  var dom_element_2 = dom_element.test;

  var immutable = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.test = exports.serialize = undefined;



  // SENTINEL constants are from https://github.com/facebook/immutable-js
  /**
   * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */

  const IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
  const IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';
  const IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
  const IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';
  const IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';
  const IS_RECORD_SENTINEL = '@@__IMMUTABLE_RECORD__@@'; // immutable v4
  const IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';
  const IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';
  const IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';

  const getImmutableName = name => 'Immutable.' + name;
  const printAsLeaf = name => '[' + name + ']';
  const SPACE = ' ';
  const LAZY = '…'; // Seq is lazy if it calls a method like filter

  const printImmutableEntries = (val, config, indentation, depth, refs, printer, type) => ++depth > config.maxDepth ? printAsLeaf(getImmutableName(type)) : getImmutableName(type) + SPACE + '{' + (0, collections.printIteratorEntries)(val.entries(), config, indentation, depth, refs, printer) + '}';

  // Record has an entries method because it is a collection in immutable v3.
  // Return an iterator for Immutable Record from version v3 or v4.
  const getRecordEntries = val => {
    let i = 0;
    return {
      next() {
        if (i < val._keys.length) {
          const key = val._keys[i++];
          return { done: false, value: [key, val.get(key)] };
        }
        return { done: true };
      }
    };
  };

  const printImmutableRecord = (val, config, indentation, depth, refs, printer) => {
    // _name property is defined only for an Immutable Record instance
    // which was constructed with a second optional descriptive name arg
    const name = getImmutableName(val._name || 'Record');
    return ++depth > config.maxDepth ? printAsLeaf(name) : name + SPACE + '{' + (0, collections.printIteratorEntries)(getRecordEntries(val), config, indentation, depth, refs, printer) + '}';
  };

  const printImmutableSeq = (val, config, indentation, depth, refs, printer) => {
    const name = getImmutableName('Seq');

    if (++depth > config.maxDepth) {
      return printAsLeaf(name);
    }

    if (val[IS_KEYED_SENTINEL]) {
      return name + SPACE + '{' + (
      // from Immutable collection of entries or from ECMAScript object
      val._iter || val._object ? (0, collections.printIteratorEntries)(val.entries(), config, indentation, depth, refs, printer) : LAZY) + '}';
    }

    return name + SPACE + '[' + (val._iter || // from Immutable collection of values
    val._array || // from ECMAScript array
    val._collection || // from ECMAScript collection in immutable v4
    val._iterable // from ECMAScript collection in immutable v3
    ? (0, collections.printIteratorValues)(val.values(), config, indentation, depth, refs, printer) : LAZY) + ']';
  };

  const printImmutableValues = (val, config, indentation, depth, refs, printer, type) => ++depth > config.maxDepth ? printAsLeaf(getImmutableName(type)) : getImmutableName(type) + SPACE + '[' + (0, collections.printIteratorValues)(val.values(), config, indentation, depth, refs, printer) + ']';

  const serialize = exports.serialize = (val, config, indentation, depth, refs, printer) => {
    if (val[IS_MAP_SENTINEL]) {
      return printImmutableEntries(val, config, indentation, depth, refs, printer, val[IS_ORDERED_SENTINEL] ? 'OrderedMap' : 'Map');
    }

    if (val[IS_LIST_SENTINEL]) {
      return printImmutableValues(val, config, indentation, depth, refs, printer, 'List');
    }
    if (val[IS_SET_SENTINEL]) {
      return printImmutableValues(val, config, indentation, depth, refs, printer, val[IS_ORDERED_SENTINEL] ? 'OrderedSet' : 'Set');
    }
    if (val[IS_STACK_SENTINEL]) {
      return printImmutableValues(val, config, indentation, depth, refs, printer, 'Stack');
    }

    if (val[IS_SEQ_SENTINEL]) {
      return printImmutableSeq(val, config, indentation, depth, refs, printer);
    }

    // For compatibility with immutable v3 and v4, let record be the default.
    return printImmutableRecord(val, config, indentation, depth, refs, printer);
  };

  // Explicitly comparing sentinel properties to true avoids false positive
  // when mock identity-obj-proxy returns the key as the value for any key.
  const test = exports.test = val => val && (val[IS_ITERABLE_SENTINEL] === true || val[IS_RECORD_SENTINEL] === true);

  exports.default = { serialize, test };
  });

  unwrapExports(immutable);
  var immutable_1 = immutable.test;
  var immutable_2 = immutable.serialize;

  var react_element = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.test = exports.serialize = undefined;



  /**
   * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */

  const elementSymbol = Symbol.for('react.element');

  // Given element.props.children, or subtree during recursive traversal,
  // return flattened array of children.
  const getChildren = function (arg) {
    let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    if (Array.isArray(arg)) {
      arg.forEach(item => {
        getChildren(item, children);
      });
    } else if (arg != null && arg !== false) {
      children.push(arg);
    }
    return children;
  };

  const getType = element => {
    if (typeof element.type === 'string') {
      return element.type;
    }
    if (typeof element.type === 'function') {
      return element.type.displayName || element.type.name || 'Unknown';
    }
    return 'UNDEFINED';
  };

  const serialize = exports.serialize = (element, config, indentation, depth, refs, printer) => ++depth > config.maxDepth ? (0, markup.printElementAsLeaf)(getType(element), config) : (0, markup.printElement)(getType(element), (0, markup.printProps)(Object.keys(element.props).filter(key => key !== 'children').sort(), element.props, config, indentation + config.indent, depth, refs, printer), (0, markup.printChildren)(getChildren(element.props.children), config, indentation + config.indent, depth, refs, printer), config, indentation);

  const test = exports.test = val => val && val.$$typeof === elementSymbol;

  exports.default = { serialize, test };
  });

  unwrapExports(react_element);
  var react_element_1 = react_element.test;
  var react_element_2 = react_element.serialize;

  var react_test_component = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.test = exports.serialize = undefined;



  /**
   * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */

  const testSymbol = Symbol.for('react.test.json');

  const serialize = exports.serialize = (object, config, indentation, depth, refs, printer) => ++depth > config.maxDepth ? (0, markup.printElementAsLeaf)(object.type, config) : (0, markup.printElement)(object.type, object.props ? (0, markup.printProps)(Object.keys(object.props).sort(),
  // Despite ternary expression, Flow 0.51.0 found incorrect error:
  // undefined is incompatible with the expected param type of Object
  // $FlowFixMe
  object.props, config, indentation + config.indent, depth, refs, printer) : '', object.children ? (0, markup.printChildren)(object.children, config, indentation + config.indent, depth, refs, printer) : '', config, indentation);

  const test = exports.test = val => val && val.$$typeof === testSymbol;

  exports.default = { serialize, test };
  });

  unwrapExports(react_test_component);
  var react_test_component_1 = react_test_component.test;
  var react_test_component_2 = react_test_component.serialize;

  var build = createCommonjsModule(function (module) {



  var _ansiStyles2 = _interopRequireDefault(ansiStyles);





  var _asymmetric_matcher2 = _interopRequireDefault(asymmetric_matcher);



  var _convert_ansi2 = _interopRequireDefault(convert_ansi);



  var _dom_collection2 = _interopRequireDefault(dom_collection);



  var _dom_element2 = _interopRequireDefault(dom_element);



  var _immutable2 = _interopRequireDefault(immutable);



  var _react_element2 = _interopRequireDefault(react_element);



  var _react_test_component2 = _interopRequireDefault(react_test_component);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */

  const toString = Object.prototype.toString;
  const toISOString = Date.prototype.toISOString;
  const errorToString = Error.prototype.toString;
  const regExpToString = RegExp.prototype.toString;
  const symbolToString = Symbol.prototype.toString;

  // Explicitly comparing typeof constructor to function avoids undefined as name
  // when mock identity-obj-proxy returns the key as the value for any key.
  const getConstructorName = val => typeof val.constructor === 'function' && val.constructor.name || 'Object';

  // Is val is equal to global window object? Works even if it does not exist :)
  /* global window */
  const isWindow = val => typeof window !== 'undefined' && val === window;

  const SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
  const NEWLINE_REGEXP = /\n/gi;

  class PrettyFormatPluginError extends Error {
    constructor(message, stack) {
      super(message);
      this.stack = stack;
      this.name = this.constructor.name;
    }
  }

  function isToStringedArrayType(toStringed) {
    return toStringed === '[object Array]' || toStringed === '[object ArrayBuffer]' || toStringed === '[object DataView]' || toStringed === '[object Float32Array]' || toStringed === '[object Float64Array]' || toStringed === '[object Int8Array]' || toStringed === '[object Int16Array]' || toStringed === '[object Int32Array]' || toStringed === '[object Uint8Array]' || toStringed === '[object Uint8ClampedArray]' || toStringed === '[object Uint16Array]' || toStringed === '[object Uint32Array]';
  }

  function printNumber(val) {
    return Object.is(val, -0) ? '-0' : String(val);
  }

  function printFunction(val, printFunctionName) {
    if (!printFunctionName) {
      return '[Function]';
    }
    return '[Function ' + (val.name || 'anonymous') + ']';
  }

  function printSymbol(val) {
    return symbolToString.call(val).replace(SYMBOL_REGEXP, 'Symbol($1)');
  }

  function printError(val) {
    return '[' + errorToString.call(val) + ']';
  }

  function printBasicValue(val, printFunctionName, escapeRegex) {
    if (val === true || val === false) {
      return '' + val;
    }
    if (val === undefined) {
      return 'undefined';
    }
    if (val === null) {
      return 'null';
    }

    const typeOf = typeof val;

    if (typeOf === 'number') {
      return printNumber(val);
    }
    if (typeOf === 'string') {
      return '"' + val.replace(/"|\\/g, '\\$&') + '"';
    }
    if (typeOf === 'function') {
      return printFunction(val, printFunctionName);
    }
    if (typeOf === 'symbol') {
      return printSymbol(val);
    }

    const toStringed = toString.call(val);

    if (toStringed === '[object WeakMap]') {
      return 'WeakMap {}';
    }
    if (toStringed === '[object WeakSet]') {
      return 'WeakSet {}';
    }
    if (toStringed === '[object Function]' || toStringed === '[object GeneratorFunction]') {
      return printFunction(val, printFunctionName);
    }
    if (toStringed === '[object Symbol]') {
      return printSymbol(val);
    }
    if (toStringed === '[object Date]') {
      return toISOString.call(val);
    }
    if (toStringed === '[object Error]') {
      return printError(val);
    }
    if (toStringed === '[object RegExp]') {
      if (escapeRegex) {
        // https://github.com/benjamingr/RegExp.escape/blob/master/polyfill.js
        return regExpToString.call(val).replace(/[\\^$*+?.()|[\]{}]/g, '\\$&');
      }
      return regExpToString.call(val);
    }

    if (val instanceof Error) {
      return printError(val);
    }

    return null;
  }

  function printComplexValue(val, config, indentation, depth, refs, hasCalledToJSON) {
    if (refs.indexOf(val) !== -1) {
      return '[Circular]';
    }
    refs = refs.slice();
    refs.push(val);

    const hitMaxDepth = ++depth > config.maxDepth;
    const min = config.min;

    if (config.callToJSON && !hitMaxDepth && val.toJSON && typeof val.toJSON === 'function' && !hasCalledToJSON) {
      return printer(val.toJSON(), config, indentation, depth, refs, true);
    }

    const toStringed = toString.call(val);
    if (toStringed === '[object Arguments]') {
      return hitMaxDepth ? '[Arguments]' : (min ? '' : 'Arguments ') + '[' + (0, collections.printListItems)(val, config, indentation, depth, refs, printer) + ']';
    }
    if (isToStringedArrayType(toStringed)) {
      return hitMaxDepth ? '[' + val.constructor.name + ']' : (min ? '' : val.constructor.name + ' ') + '[' + (0, collections.printListItems)(val, config, indentation, depth, refs, printer) + ']';
    }
    if (toStringed === '[object Map]') {
      return hitMaxDepth ? '[Map]' : 'Map {' + (0, collections.printIteratorEntries)(val.entries(), config, indentation, depth, refs, printer, ' => ') + '}';
    }
    if (toStringed === '[object Set]') {
      return hitMaxDepth ? '[Set]' : 'Set {' + (0, collections.printIteratorValues)(val.values(), config, indentation, depth, refs, printer) + '}';
    }

    // Avoid failure to serialize global window object in jsdom test environment.
    // For example, not even relevant if window is prop of React element.
    return hitMaxDepth || isWindow(val) ? '[' + getConstructorName(val) + ']' : (min ? '' : getConstructorName(val) + ' ') + '{' + (0, collections.printObjectProperties)(val, config, indentation, depth, refs, printer) + '}';
  }

  function printPlugin(plugin, val, config, indentation, depth, refs) {
    let printed;

    try {
      printed = plugin.serialize ? plugin.serialize(val, config, indentation, depth, refs, printer) : plugin.print(val, valChild => printer(valChild, config, indentation, depth, refs), str => {
        const indentationNext = indentation + config.indent;
        return indentationNext + str.replace(NEWLINE_REGEXP, '\n' + indentationNext);
      }, {
        edgeSpacing: config.spacingOuter,
        min: config.min,
        spacing: config.spacingInner
      }, config.colors);
    } catch (error) {
      throw new PrettyFormatPluginError(error.message, error.stack);
    }
    if (typeof printed !== 'string') {
      throw new Error(`pretty-format: Plugin must return type "string" but instead returned "${typeof printed}".`);
    }
    return printed;
  }

  function findPlugin(plugins, val) {
    for (let p = 0; p < plugins.length; p++) {
      try {
        if (plugins[p].test(val)) {
          return plugins[p];
        }
      } catch (error) {
        throw new PrettyFormatPluginError(error.message, error.stack);
      }
    }

    return null;
  }

  function printer(val, config, indentation, depth, refs, hasCalledToJSON) {
    const plugin = findPlugin(config.plugins, val);
    if (plugin !== null) {
      return printPlugin(plugin, val, config, indentation, depth, refs);
    }

    const basicResult = printBasicValue(val, config.printFunctionName, config.escapeRegex);
    if (basicResult !== null) {
      return basicResult;
    }

    return printComplexValue(val, config, indentation, depth, refs, hasCalledToJSON);
  }

  const DEFAULT_THEME = {
    comment: 'gray',
    content: 'reset',
    prop: 'yellow',
    tag: 'cyan',
    value: 'green'
  };

  const DEFAULT_THEME_KEYS = Object.keys(DEFAULT_THEME);

  const DEFAULT_OPTIONS = {
    callToJSON: true,
    escapeRegex: false,
    highlight: false,
    indent: 2,
    maxDepth: Infinity,
    min: false,
    plugins: [],
    printFunctionName: true,
    theme: DEFAULT_THEME
  };

  function validateOptions(options) {
    Object.keys(options).forEach(key => {
      if (!DEFAULT_OPTIONS.hasOwnProperty(key)) {
        throw new Error(`pretty-format: Unknown option "${key}".`);
      }
    });

    if (options.min && options.indent !== undefined && options.indent !== 0) {
      throw new Error('pretty-format: Options "min" and "indent" cannot be used together.');
    }

    if (options.theme !== undefined) {
      if (options.theme === null) {
        throw new Error(`pretty-format: Option "theme" must not be null.`);
      }

      if (typeof options.theme !== 'object') {
        throw new Error(`pretty-format: Option "theme" must be of type "object" but instead received "${typeof options.theme}".`);
      }
    }
  }

  const getColorsHighlight = (options
  // $FlowFixMe: Flow thinks keys from `Colors` are missing from `DEFAULT_THEME_KEYS`
  ) => DEFAULT_THEME_KEYS.reduce((colors, key) => {
    const value = options.theme && options.theme[key] !== undefined ? options.theme[key] : DEFAULT_THEME[key];
    const color = _ansiStyles2.default[value];
    if (color && typeof color.close === 'string' && typeof color.open === 'string') {
      colors[key] = color;
    } else {
      throw new Error(`pretty-format: Option "theme" has a key "${key}" whose value "${value}" is undefined in ansi-styles.`);
    }
    return colors;
  }, Object.create(null));

  const getColorsEmpty = () =>
  // $FlowFixMe: Flow thinks keys from `Colors` are missing from `DEFAULT_THEME_KEYS`
  DEFAULT_THEME_KEYS.reduce((colors, key) => {
    colors[key] = { close: '', open: '' };
    return colors;
  }, Object.create(null));

  const getPrintFunctionName = options => options && options.printFunctionName !== undefined ? options.printFunctionName : DEFAULT_OPTIONS.printFunctionName;

  const getEscapeRegex = options => options && options.escapeRegex !== undefined ? options.escapeRegex : DEFAULT_OPTIONS.escapeRegex;

  const getConfig = options => ({
    callToJSON: options && options.callToJSON !== undefined ? options.callToJSON : DEFAULT_OPTIONS.callToJSON,
    colors: options && options.highlight ? getColorsHighlight(options) : getColorsEmpty(),
    escapeRegex: getEscapeRegex(options),
    indent: options && options.min ? '' : createIndent(options && options.indent !== undefined ? options.indent : DEFAULT_OPTIONS.indent),
    maxDepth: options && options.maxDepth !== undefined ? options.maxDepth : DEFAULT_OPTIONS.maxDepth,
    min: options && options.min !== undefined ? options.min : DEFAULT_OPTIONS.min,
    plugins: options && options.plugins !== undefined ? options.plugins : DEFAULT_OPTIONS.plugins,
    printFunctionName: getPrintFunctionName(options),
    spacingInner: options && options.min ? ' ' : '\n',
    spacingOuter: options && options.min ? '' : '\n'
  });

  function createIndent(indent) {
    return new Array(indent + 1).join(' ');
  }

  function prettyFormat(val, options) {
    if (options) {
      validateOptions(options);
      if (options.plugins) {
        const plugin = findPlugin(options.plugins, val);
        if (plugin !== null) {
          return printPlugin(plugin, val, getConfig(options), '', 0, []);
        }
      }
    }

    const basicResult = printBasicValue(val, getPrintFunctionName(options), getEscapeRegex(options));
    if (basicResult !== null) {
      return basicResult;
    }

    return printComplexValue(val, getConfig(options), '', 0, []);
  }

  prettyFormat.plugins = {
    AsymmetricMatcher: _asymmetric_matcher2.default,
    ConvertAnsi: _convert_ansi2.default,
    DOMCollection: _dom_collection2.default,
    DOMElement: _dom_element2.default,
    Immutable: _immutable2.default,
    ReactElement: _react_element2.default,
    ReactTestComponent: _react_test_component2.default
  };

  module.exports = prettyFormat;
  });

  var prettyFormat = unwrapExports(build);

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var objectWithoutProperties = function (obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  };

  var _prettyFormat$plugins = prettyFormat.plugins,
      DOMElement = _prettyFormat$plugins.DOMElement,
      DOMCollection = _prettyFormat$plugins.DOMCollection;


  function prettyDOM(htmlElement, maxLength, options) {
    if (htmlElement.documentElement) {
      htmlElement = htmlElement.documentElement;
    }

    var debugContent = prettyFormat(htmlElement, _extends({
      plugins: [DOMElement, DOMCollection],
      printFunctionName: false,
      highlight: true
    }, options));
    return maxLength !== undefined && htmlElement.outerHTML.length > maxLength ? debugContent.slice(0, maxLength) + '...' : debugContent;
  }

  /* eslint-disable complexity */
  function debugDOM(htmlElement) {
    var limit = 7000;
    var inNode = typeof process !== 'undefined' && process.versions !== undefined && process.versions.node !== undefined;
    var inCypress = typeof window !== 'undefined' && window.Cypress;
    /* istanbul ignore else */
    if (inCypress) {
      return '';
    } else if (inNode) {
      return prettyDOM(htmlElement, limit);
    } else {
      return prettyDOM(htmlElement, limit, { highlight: false });
    }
  }
  /* eslint-enable complexity */

  function getElementError(message, container) {
    return new Error([message, debugDOM(container)].filter(Boolean).join('\n\n'));
  }

  function firstResultOrNull(queryFunction) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var result = queryFunction.apply(undefined, args);
    if (result.length === 0) return null;
    return result[0];
  }

  function queryAllByAttribute(attribute, container, text) {
    var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
        _ref$exact = _ref.exact,
        exact = _ref$exact === undefined ? true : _ref$exact,
        _ref$collapseWhitespa = _ref.collapseWhitespace,
        collapseWhitespace = _ref$collapseWhitespa === undefined ? true : _ref$collapseWhitespa,
        _ref$trim = _ref.trim,
        trim = _ref$trim === undefined ? true : _ref$trim;

    var matcher = exact ? matches : fuzzyMatches;
    var matchOpts = { collapseWhitespace: collapseWhitespace, trim: trim };
    return Array.from(container.querySelectorAll('[' + attribute + ']')).filter(function (node) {
      return matcher(node.getAttribute(attribute), node, text, matchOpts);
    });
  }

  function queryByAttribute() {
    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return firstResultOrNull.apply(undefined, [queryAllByAttribute].concat(args));
  }

  var queryHelpers = /*#__PURE__*/Object.freeze({
    debugDOM: debugDOM,
    getElementError: getElementError,
    firstResultOrNull: firstResultOrNull,
    queryAllByAttribute: queryAllByAttribute,
    queryByAttribute: queryByAttribute
  });

  // Here are the queries for the library.
  // The queries here should only be things that are accessible to both users who are using a screen reader
  // and those who are not using a screen reader (with the exception of the data-testid attribute query).

  function queryAllLabelsByText(container, text) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref$exact = _ref.exact,
        exact = _ref$exact === undefined ? true : _ref$exact,
        _ref$trim = _ref.trim,
        trim = _ref$trim === undefined ? true : _ref$trim,
        _ref$collapseWhitespa = _ref.collapseWhitespace,
        collapseWhitespace = _ref$collapseWhitespa === undefined ? true : _ref$collapseWhitespa;

    var matcher = exact ? matches : fuzzyMatches;
    var matchOpts = { collapseWhitespace: collapseWhitespace, trim: trim };
    return Array.from(container.querySelectorAll('label')).filter(function (label) {
      return matcher(label.textContent, label, text, matchOpts);
    });
  }

  function queryAllByLabelText(container, text) {
    var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref2$selector = _ref2.selector,
        selector = _ref2$selector === undefined ? '*' : _ref2$selector,
        _ref2$exact = _ref2.exact,
        exact = _ref2$exact === undefined ? true : _ref2$exact,
        _ref2$collapseWhitesp = _ref2.collapseWhitespace,
        collapseWhitespace = _ref2$collapseWhitesp === undefined ? true : _ref2$collapseWhitesp,
        _ref2$trim = _ref2.trim,
        trim = _ref2$trim === undefined ? true : _ref2$trim;

    var labels = queryAllLabelsByText(container, text, _extends({ exact: exact }, { collapseWhitespace: collapseWhitespace, trim: trim }));
    var labelledElements = labels.map(function (label) {
      if (label.control) {
        return label.control;
      }
      /* istanbul ignore if */
      if (label.getAttribute('for')) {
        // we're using this notation because with the # selector we would have to escape special characters e.g. user.name
        // see https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector#Escaping_special_characters
        // <label for="someId">text</label><input id="someId" />

        // .control support has landed in jsdom (https://github.com/jsdom/jsdom/issues/2175)
        return container.querySelector('[id="' + label.getAttribute('for') + '"]');
      }
      if (label.getAttribute('id')) {
        // <label id="someId">text</label><input aria-labelledby="someId" />
        return container.querySelector('[aria-labelledby~="' + label.getAttribute('id') + '"]');
      }
      if (label.childNodes.length) {
        // <label>text: <input /></label>
        return label.querySelector(selector);
      }
      return null;
    }).filter(function (label) {
      return label !== null;
    }).concat(queryAllByAttribute('aria-label', container, text, { exact: exact }));

    return labelledElements;
  }

  function queryByLabelText() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return firstResultOrNull.apply(undefined, [queryAllByLabelText].concat(args));
  }

  function queryAllByText(container, text) {
    var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref3$selector = _ref3.selector,
        selector = _ref3$selector === undefined ? '*' : _ref3$selector,
        _ref3$exact = _ref3.exact,
        exact = _ref3$exact === undefined ? true : _ref3$exact,
        _ref3$collapseWhitesp = _ref3.collapseWhitespace,
        collapseWhitespace = _ref3$collapseWhitesp === undefined ? true : _ref3$collapseWhitesp,
        _ref3$trim = _ref3.trim,
        trim = _ref3$trim === undefined ? true : _ref3$trim;

    var matcher = exact ? matches : fuzzyMatches;
    var matchOpts = { collapseWhitespace: collapseWhitespace, trim: trim };
    return Array.from(container.querySelectorAll(selector)).filter(function (node) {
      return matcher(getNodeText(node), node, text, matchOpts);
    });
  }

  function queryByText() {
    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return firstResultOrNull.apply(undefined, [queryAllByText].concat(args));
  }

  function queryAllByTitle(container, text) {
    var _ref4 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref4$exact = _ref4.exact,
        exact = _ref4$exact === undefined ? true : _ref4$exact,
        _ref4$collapseWhitesp = _ref4.collapseWhitespace,
        collapseWhitespace = _ref4$collapseWhitesp === undefined ? true : _ref4$collapseWhitesp,
        _ref4$trim = _ref4.trim,
        trim = _ref4$trim === undefined ? true : _ref4$trim;

    var matcher = exact ? matches : fuzzyMatches;
    var matchOpts = { collapseWhitespace: collapseWhitespace, trim: trim };
    return Array.from(container.querySelectorAll('[title], svg > title')).filter(function (node) {
      return matcher(node.getAttribute('title'), node, text, matchOpts) || matcher(getNodeText(node), node, text, matchOpts);
    });
  }

  function queryByTitle() {
    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    return firstResultOrNull.apply(undefined, [queryAllByTitle].concat(args));
  }

  function queryAllBySelectText(container, text) {
    var _ref5 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref5$exact = _ref5.exact,
        exact = _ref5$exact === undefined ? true : _ref5$exact,
        _ref5$collapseWhitesp = _ref5.collapseWhitespace,
        collapseWhitespace = _ref5$collapseWhitesp === undefined ? true : _ref5$collapseWhitesp,
        _ref5$trim = _ref5.trim,
        trim = _ref5$trim === undefined ? true : _ref5$trim;

    var matcher = exact ? matches : fuzzyMatches;
    var matchOpts = { collapseWhitespace: collapseWhitespace, trim: trim };
    return Array.from(container.querySelectorAll('select')).filter(function (selectNode) {
      return Array.from(selectNode.selectedOptions).some(function (optionNode) {
        return matcher(getNodeText(optionNode), optionNode, text, matchOpts);
      });
    });
  }

  function queryBySelectText() {
    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    return firstResultOrNull.apply(undefined, [queryAllBySelectText].concat(args));
  }

  var queryByPlaceholderText = queryByAttribute.bind(null, 'placeholder');
  var queryAllByPlaceholderText = queryAllByAttribute.bind(null, 'placeholder');
  var queryByTestId = queryByAttribute.bind(null, 'data-testid');
  var queryAllByTestId = queryAllByAttribute.bind(null, 'data-testid');
  var queryByValue = queryByAttribute.bind(null, 'value');
  var queryAllByValue = queryAllByAttribute.bind(null, 'value');
  var queryByRole = queryByAttribute.bind(null, 'role');
  var queryAllByRole = queryAllByAttribute.bind(null, 'role');

  function queryAllByAltText(container, alt) {
    var _ref6 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref6$exact = _ref6.exact,
        exact = _ref6$exact === undefined ? true : _ref6$exact,
        _ref6$collapseWhitesp = _ref6.collapseWhitespace,
        collapseWhitespace = _ref6$collapseWhitesp === undefined ? true : _ref6$collapseWhitesp,
        _ref6$trim = _ref6.trim,
        trim = _ref6$trim === undefined ? true : _ref6$trim;

    var matcher = exact ? matches : fuzzyMatches;
    var matchOpts = { collapseWhitespace: collapseWhitespace, trim: trim };
    return Array.from(container.querySelectorAll('img,input,area')).filter(function (node) {
      return matcher(node.getAttribute('alt'), node, alt, matchOpts);
    });
  }

  function queryByAltText() {
    for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      args[_key5] = arguments[_key5];
    }

    return firstResultOrNull.apply(undefined, [queryAllByAltText].concat(args));
  }

  // getters
  // the reason we're not dynamically generating these functions that look so similar:
  // 1. The error messages are specific to each one and depend on arguments
  // 2. The stack trace will look better because it'll have a helpful method name.

  function getAllByTestId(container, id) {
    for (var _len6 = arguments.length, rest = Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {
      rest[_key6 - 2] = arguments[_key6];
    }

    var els = queryAllByTestId.apply(undefined, [container, id].concat(rest));
    if (!els.length) {
      throw getElementError('Unable to find an element by: [data-testid="' + id + '"]', container);
    }
    return els;
  }

  function getByTestId() {
    for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
      args[_key7] = arguments[_key7];
    }

    return firstResultOrNull.apply(undefined, [getAllByTestId].concat(args));
  }

  function getAllByTitle(container, title) {
    for (var _len8 = arguments.length, rest = Array(_len8 > 2 ? _len8 - 2 : 0), _key8 = 2; _key8 < _len8; _key8++) {
      rest[_key8 - 2] = arguments[_key8];
    }

    var els = queryAllByTitle.apply(undefined, [container, title].concat(rest));
    if (!els.length) {
      throw getElementError('Unable to find an element with the title: ' + title + '.', container);
    }
    return els;
  }

  function getByTitle() {
    for (var _len9 = arguments.length, args = Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
      args[_key9] = arguments[_key9];
    }

    return firstResultOrNull.apply(undefined, [getAllByTitle].concat(args));
  }

  function getAllByValue(container, value) {
    for (var _len10 = arguments.length, rest = Array(_len10 > 2 ? _len10 - 2 : 0), _key10 = 2; _key10 < _len10; _key10++) {
      rest[_key10 - 2] = arguments[_key10];
    }

    var els = queryAllByValue.apply(undefined, [container, value].concat(rest));
    if (!els.length) {
      throw getElementError('Unable to find an element with the value: ' + value + '.', container);
    }
    return els;
  }

  function getByValue() {
    for (var _len11 = arguments.length, args = Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
      args[_key11] = arguments[_key11];
    }

    return firstResultOrNull.apply(undefined, [getAllByValue].concat(args));
  }

  function getAllByPlaceholderText(container, text) {
    for (var _len12 = arguments.length, rest = Array(_len12 > 2 ? _len12 - 2 : 0), _key12 = 2; _key12 < _len12; _key12++) {
      rest[_key12 - 2] = arguments[_key12];
    }

    var els = queryAllByPlaceholderText.apply(undefined, [container, text].concat(rest));
    if (!els.length) {
      throw getElementError('Unable to find an element with the placeholder text of: ' + text, container);
    }
    return els;
  }

  function getByPlaceholderText() {
    for (var _len13 = arguments.length, args = Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
      args[_key13] = arguments[_key13];
    }

    return firstResultOrNull.apply(undefined, [getAllByPlaceholderText].concat(args));
  }

  function getAllByLabelText(container, text) {
    for (var _len14 = arguments.length, rest = Array(_len14 > 2 ? _len14 - 2 : 0), _key14 = 2; _key14 < _len14; _key14++) {
      rest[_key14 - 2] = arguments[_key14];
    }

    var els = queryAllByLabelText.apply(undefined, [container, text].concat(rest));
    if (!els.length) {
      var labels = queryAllLabelsByText.apply(undefined, [container, text].concat(rest));
      if (labels.length) {
        throw getElementError('Found a label with the text of: ' + text + ', however no form control was found associated to that label. Make sure you\'re using the "for" attribute or "aria-labelledby" attribute correctly.', container);
      } else {
        throw getElementError('Unable to find a label with the text of: ' + text, container);
      }
    }
    return els;
  }

  function getByLabelText() {
    for (var _len15 = arguments.length, args = Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {
      args[_key15] = arguments[_key15];
    }

    return firstResultOrNull.apply(undefined, [getAllByLabelText].concat(args));
  }

  function getAllByText(container, text) {
    for (var _len16 = arguments.length, rest = Array(_len16 > 2 ? _len16 - 2 : 0), _key16 = 2; _key16 < _len16; _key16++) {
      rest[_key16 - 2] = arguments[_key16];
    }

    var els = queryAllByText.apply(undefined, [container, text].concat(rest));
    if (!els.length) {
      throw getElementError('Unable to find an element with the text: ' + text + '. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.', container);
    }
    return els;
  }

  function getByText() {
    for (var _len17 = arguments.length, args = Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {
      args[_key17] = arguments[_key17];
    }

    return firstResultOrNull.apply(undefined, [getAllByText].concat(args));
  }

  function getAllByAltText(container, alt) {
    for (var _len18 = arguments.length, rest = Array(_len18 > 2 ? _len18 - 2 : 0), _key18 = 2; _key18 < _len18; _key18++) {
      rest[_key18 - 2] = arguments[_key18];
    }

    var els = queryAllByAltText.apply(undefined, [container, alt].concat(rest));
    if (!els.length) {
      throw getElementError('Unable to find an element with the alt text: ' + alt, container);
    }
    return els;
  }

  function getByAltText() {
    for (var _len19 = arguments.length, args = Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {
      args[_key19] = arguments[_key19];
    }

    return firstResultOrNull.apply(undefined, [getAllByAltText].concat(args));
  }

  function getAllByRole(container, id) {
    for (var _len20 = arguments.length, rest = Array(_len20 > 2 ? _len20 - 2 : 0), _key20 = 2; _key20 < _len20; _key20++) {
      rest[_key20 - 2] = arguments[_key20];
    }

    var els = queryAllByRole.apply(undefined, [container, id].concat(rest));
    if (!els.length) {
      throw getElementError('Unable to find an element by role=' + id, container);
    }
    return els;
  }

  function getByRole() {
    for (var _len21 = arguments.length, args = Array(_len21), _key21 = 0; _key21 < _len21; _key21++) {
      args[_key21] = arguments[_key21];
    }

    return firstResultOrNull.apply(undefined, [getAllByRole].concat(args));
  }

  function getAllBySelectText(container, text) {
    for (var _len22 = arguments.length, rest = Array(_len22 > 2 ? _len22 - 2 : 0), _key22 = 2; _key22 < _len22; _key22++) {
      rest[_key22 - 2] = arguments[_key22];
    }

    var els = queryAllBySelectText.apply(undefined, [container, text].concat(rest));
    if (!els.length) {
      throw getElementError('Unable to find a <select> element with the selected option\'s text: ' + text, container);
    }
    return els;
  }

  function getBySelectText() {
    for (var _len23 = arguments.length, args = Array(_len23), _key23 = 0; _key23 < _len23; _key23++) {
      args[_key23] = arguments[_key23];
    }

    return firstResultOrNull.apply(undefined, [getAllBySelectText].concat(args));
  }

  var defaultQueries = /*#__PURE__*/Object.freeze({
    queryByPlaceholderText: queryByPlaceholderText,
    queryAllByPlaceholderText: queryAllByPlaceholderText,
    getByPlaceholderText: getByPlaceholderText,
    getAllByPlaceholderText: getAllByPlaceholderText,
    queryByText: queryByText,
    queryAllByText: queryAllByText,
    getByText: getByText,
    getAllByText: getAllByText,
    queryByLabelText: queryByLabelText,
    queryAllByLabelText: queryAllByLabelText,
    getByLabelText: getByLabelText,
    getAllByLabelText: getAllByLabelText,
    queryByAltText: queryByAltText,
    queryAllByAltText: queryAllByAltText,
    getByAltText: getByAltText,
    getAllByAltText: getAllByAltText,
    queryBySelectText: queryBySelectText,
    queryAllBySelectText: queryAllBySelectText,
    getBySelectText: getBySelectText,
    getAllBySelectText: getAllBySelectText,
    queryByTestId: queryByTestId,
    queryAllByTestId: queryAllByTestId,
    getByTestId: getByTestId,
    getAllByTestId: getAllByTestId,
    queryByTitle: queryByTitle,
    queryAllByTitle: queryAllByTitle,
    getByTitle: getByTitle,
    getAllByTitle: getAllByTitle,
    queryByValue: queryByValue,
    queryAllByValue: queryAllByValue,
    getByValue: getByValue,
    getAllByValue: getAllByValue,
    queryByRole: queryByRole,
    queryAllByRole: queryAllByRole,
    getAllByRole: getAllByRole,
    getByRole: getByRole
  });

  /**
   * @typedef {{[key: string]: Function}} FuncMap
   */

  /**
   * @param {HTMLElement} element container
   * @param {FuncMap} queries object of functions
   * @returns {FuncMap} returns object of functions bound to container
   */
  function getQueriesForElement(element) {
    var queries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultQueries;

    return Object.entries(queries).reduce(function (helpers, _ref) {
      var key = _ref[0],
          fn = _ref[1];

      helpers[key] = fn.bind(null, element);
      return helpers;
    }, {});
  }

  var lib = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  // Used to avoid using Jest's fake timers.
  // See https://github.com/TheBrainFamily/wait-for-expect/issues/4 for more info
  var _ref = typeof window !== "undefined" ? window : commonjsGlobal,
      setTimeout = _ref.setTimeout;
  /**
   * Waits for the expectation to pass and returns a Promise
   *
   * @param  expectation  Function  Expectation that has to complete without throwing
   * @param  timeout  Number  Maximum wait interval, 4500ms by default
   * @param  interval  Number  Wait-between-retries interval, 50ms by default
   * @return  Promise  Promise to return a callback result
   */


  var waitForExpect = function waitForExpect(expectation) {
    var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4500;
    var interval = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;
    var startTime = Date.now();
    return new Promise(function (resolve, reject) {
      var rejectOrRerun = function rejectOrRerun(error) {
        if (Date.now() - startTime >= timeout) {
          reject(error);
        } // eslint-disable-next-line no-use-before-define


        setTimeout(runExpectation, interval);
      };

      function runExpectation() {
        try {
          Promise.resolve(expectation()).then(function () {
            return resolve();
          }).catch(rejectOrRerun);
        } catch (error) {
          rejectOrRerun(error);
        }
      }

      setTimeout(runExpectation, 0);
    });
  };

  var _default = waitForExpect;
  exports.default = _default;
  module.exports = exports["default"];
  });

  var waitForExpect = unwrapExports(lib);

  function wait() {
    var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};

    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$timeout = _ref.timeout,
        timeout = _ref$timeout === undefined ? 4500 : _ref$timeout,
        _ref$interval = _ref.interval,
        interval = _ref$interval === undefined ? 50 : _ref$interval;

    return waitForExpect(callback, timeout, interval);
  }

  // mutationobserver-shim v0.3.2 (github.com/megawac/MutationObserver.js)
  // Authors: Graeme Yeates (github.com/megawac) 
  window.MutationObserver=window.MutationObserver||function(w){function v(a){this.i=[];this.m=a;}function I(a){(function c(){var d=a.takeRecords();d.length&&a.m(d,a);a.h=setTimeout(c,v._period);})();}function p(a){var b={type:null,target:null,addedNodes:[],removedNodes:[],previousSibling:null,nextSibling:null,attributeName:null,attributeNamespace:null,oldValue:null},c;for(c in a)b[c]!==w&&a[c]!==w&&(b[c]=a[c]);return b}function J(a,b){var c=C(a,b);return function(d){var f=d.length,n;b.a&&3===a.nodeType&&
  a.nodeValue!==c.a&&d.push(new p({type:"characterData",target:a,oldValue:c.a}));b.b&&c.b&&A(d,a,c.b,b.f);if(b.c||b.g)n=K(d,a,c,b);if(n||d.length!==f)c=C(a,b);}}function L(a,b){return b.value}function M(a,b){return "style"!==b.name?b.value:a.style.cssText}function A(a,b,c,d){for(var f={},n=b.attributes,k,g,x=n.length;x--;)k=n[x],g=k.name,d&&d[g]===w||(D(b,k)!==c[g]&&a.push(p({type:"attributes",target:b,attributeName:g,oldValue:c[g],attributeNamespace:k.namespaceURI})),f[g]=!0);for(g in c)f[g]||a.push(p({target:b,
  type:"attributes",attributeName:g,oldValue:c[g]}));}function K(a,b,c,d){function f(b,c,f,k,y){var g=b.length-1;y=-~((g-y)/2);for(var h,l,e;e=b.pop();)h=f[e.j],l=k[e.l],d.c&&y&&Math.abs(e.j-e.l)>=g&&(a.push(p({type:"childList",target:c,addedNodes:[h],removedNodes:[h],nextSibling:h.nextSibling,previousSibling:h.previousSibling})),y--),d.b&&l.b&&A(a,h,l.b,d.f),d.a&&3===h.nodeType&&h.nodeValue!==l.a&&a.push(p({type:"characterData",target:h,oldValue:l.a})),d.g&&n(h,l);}function n(b,c){for(var g=b.childNodes,
  q=c.c,x=g.length,v=q?q.length:0,h,l,e,m,t,z=0,u=0,r=0;u<x||r<v;)m=g[u],t=(e=q[r])&&e.node,m===t?(d.b&&e.b&&A(a,m,e.b,d.f),d.a&&e.a!==w&&m.nodeValue!==e.a&&a.push(p({type:"characterData",target:m,oldValue:e.a})),l&&f(l,b,g,q,z),d.g&&(m.childNodes.length||e.c&&e.c.length)&&n(m,e),u++,r++):(k=!0,h||(h={},l=[]),m&&(h[e=E(m)]||(h[e]=!0,-1===(e=F(q,m,r,"node"))?d.c&&(a.push(p({type:"childList",target:b,addedNodes:[m],nextSibling:m.nextSibling,previousSibling:m.previousSibling})),z++):l.push({j:u,l:e})),
  u++),t&&t!==g[u]&&(h[e=E(t)]||(h[e]=!0,-1===(e=F(g,t,u))?d.c&&(a.push(p({type:"childList",target:c.node,removedNodes:[t],nextSibling:q[r+1],previousSibling:q[r-1]})),z--):l.push({j:e,l:r})),r++));l&&f(l,b,g,q,z);}var k;n(b,c);return k}function C(a,b){var c=!0;return function f(a){var k={node:a};!b.a||3!==a.nodeType&&8!==a.nodeType?(b.b&&c&&1===a.nodeType&&(k.b=G(a.attributes,function(c,f){if(!b.f||b.f[f.name])c[f.name]=D(a,f);return c})),c&&(b.c||b.a||b.b&&b.g)&&(k.c=N(a.childNodes,f)),c=b.g):k.a=
  a.nodeValue;return k}(a)}function E(a){try{return a.id||(a.mo_id=a.mo_id||H++)}catch(b){try{return a.nodeValue}catch(c){return H++}}}function N(a,b){for(var c=[],d=0;d<a.length;d++)c[d]=b(a[d],d,a);return c}function G(a,b){for(var c={},d=0;d<a.length;d++)c=b(c,a[d],d,a);return c}function F(a,b,c,d){for(;c<a.length;c++)if((d?a[c][d]:a[c])===b)return c;return -1}v._period=30;v.prototype={observe:function(a,b){for(var c={b:!!(b.attributes||b.attributeFilter||b.attributeOldValue),c:!!b.childList,g:!!b.subtree,
  a:!(!b.characterData&&!b.characterDataOldValue)},d=this.i,f=0;f<d.length;f++)d[f].s===a&&d.splice(f,1);b.attributeFilter&&(c.f=G(b.attributeFilter,function(a,b){a[b]=!0;return a}));d.push({s:a,o:J(a,c)});this.h||I(this);},takeRecords:function(){for(var a=[],b=this.i,c=0;c<b.length;c++)b[c].o(a);return a},disconnect:function(){this.i=[];clearTimeout(this.h);this.h=null;}};var B=document.createElement("i");B.style.top=0;var D=(B="null"!=B.attributes.style.value)?L:M,H=1;return v}(void 0);

  function waitForElement() {
    var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$container = _ref.container,
        container = _ref$container === undefined ? document : _ref$container,
        _ref$timeout = _ref.timeout,
        timeout = _ref$timeout === undefined ? 4500 : _ref$timeout,
        _ref$mutationObserver = _ref.mutationObserverOptions,
        mutationObserverOptions = _ref$mutationObserver === undefined ? {
      subtree: true,
      childList: true,
      attributes: true,
      characterData: true
    } : _ref$mutationObserver;

    return new Promise(function (resolve, reject) {
      // Disabling eslint prefer-const below: either prefer-const or no-use-before-define triggers.
      var lastError = void 0,
          observer = void 0,
          timer = void 0; // eslint-disable-line prefer-const
      function onDone(error, result) {
        clearTimeout(timer);
        setImmediate(function () {
          return observer.disconnect();
        });
        if (error) {
          reject(error);
        } else {
          resolve(result);
        }
      }
      function onMutation() {
        if (callback === undefined) {
          onDone(null, undefined);
          return;
        }
        try {
          var result = callback();
          if (result) {
            onDone(null, result);
          }
          // If `callback` returns falsy value, wait for the next mutation or timeout.
        } catch (error) {
          // Save the callback error to reject the promise with it.
          lastError = error;
          // If `callback` throws an error, wait for the next mutation or timeout.
        }
      }
      function onTimeout() {
        onDone(lastError || new Error('Timed out in waitForElement.'), null);
      }
      timer = setTimeout(onTimeout, timeout);
      observer = new window.MutationObserver(onMutation);
      observer.observe(container, mutationObserverOptions);
      if (callback !== undefined) {
        onMutation();
      }
    });
  }

  var _ref = typeof window === 'undefined' ? /* istanbul ignore next */global : window,
      AnimationEvent = _ref.AnimationEvent,
      ClipboardEvent = _ref.ClipboardEvent,
      CompositionEvent = _ref.CompositionEvent,
      DragEvent = _ref.DragEvent,
      Event = _ref.Event,
      FocusEvent = _ref.FocusEvent,
      InputEvent = _ref.InputEvent,
      KeyboardEvent = _ref.KeyboardEvent,
      MouseEvent = _ref.MouseEvent,
      ProgressEvent = _ref.ProgressEvent,
      TouchEvent = _ref.TouchEvent,
      TransitionEvent = _ref.TransitionEvent,
      UIEvent = _ref.UIEvent,
      WheelEvent = _ref.WheelEvent;

  var eventMap = {
    // Clipboard Events
    copy: {
      EventType: ClipboardEvent,
      defaultInit: { bubbles: true, cancelable: true }
    },
    cut: {
      EventType: ClipboardEvent,
      defaultInit: { bubbles: true, cancelable: true }
    },
    paste: {
      EventType: ClipboardEvent,
      defaultInit: { bubbles: true, cancelable: true }
    },
    // Composition Events
    compositionEnd: {
      EventType: CompositionEvent,
      defaultInit: { bubbles: true, cancelable: true }
    },
    compositionStart: {
      EventType: CompositionEvent,
      defaultInit: { bubbles: true, cancelable: true }
    },
    compositionUpdate: {
      EventType: CompositionEvent,
      defaultInit: { bubbles: true, cancelable: false }
    },
    // Keyboard Events
    keyDown: {
      EventType: KeyboardEvent,
      defaultInit: { bubbles: true, cancelable: true }
    },
    keyPress: {
      EventType: KeyboardEvent,
      defaultInit: { bubbles: true, cancelable: true }
    },
    keyUp: {
      EventType: KeyboardEvent,
      defaultInit: { bubbles: true, cancelable: true }
    },
    // Focus Events
    focus: {
      EventType: FocusEvent,
      defaultInit: { bubbles: false, cancelable: false }
    },
    blur: {
      EventType: FocusEvent,
      defaultInit: { bubbles: false, cancelable: false }
    },
    // Form Events
    change: {
      EventType: InputEvent,
      defaultInit: { bubbles: true, cancelable: true }
    },
    input: {
      EventType: InputEvent,
      defaultInit: { bubbles: true, cancelable: true }
    },
    invalid: {
      EventType: Event,
      defaultInit: { bubbles: false, cancelable: true }
    },
    submit: {
      EventType: Event,
      defaultInit: { bubbles: true, cancelable: true }
    },
    // Mouse Events
    click: {
      EventType: MouseEvent,
      defaultInit: { bubbles: true, cancelable: true, button: 0 }
    },
    contextMenu: {
      EventType: MouseEvent,
      defaultInit: { bubbles: true, cancelable: true }
    },
    dblClick: {
      EventType: MouseEvent,
      defaultInit: { bubbles: true, cancelable: true }
    },
    drag: {
      EventType: DragEvent,
      defaultInit: { bubbles: true, cancelable: true }
    },
    dragEnd: {
      EventType: DragEvent,
      defaultInit: { bubbles: true, cancelable: false }
    },
    dragEnter: {
      EventType: DragEvent,
      defaultInit: { bubbles: true, cancelable: true }
    },
    dragExit: {
      EventType: DragEvent,
      defaultInit: { bubbles: true, cancelable: false }
    },
    dragLeave: {
      EventType: DragEvent,
      defaultInit: { bubbles: true, cancelable: false }
    },
    dragOver: {
      EventType: DragEvent,
      defaultInit: { bubbles: true, cancelable: true }
    },
    dragStart: {
      EventType: DragEvent,
      defaultInit: { bubbles: true, cancelable: true }
    },
    drop: {
      EventType: DragEvent,
      defaultInit: { bubbles: true, cancelable: true }
    },
    mouseDown: {
      EventType: MouseEvent,
      defaultInit: { bubbles: true, cancelable: true }
    },
    mouseEnter: {
      EventType: MouseEvent,
      defaultInit: { bubbles: true, cancelable: true }
    },
    mouseLeave: {
      EventType: MouseEvent,
      defaultInit: { bubbles: true, cancelable: true }
    },
    mouseMove: {
      EventType: MouseEvent,
      defaultInit: { bubbles: true, cancelable: true }
    },
    mouseOut: {
      EventType: MouseEvent,
      defaultInit: { bubbles: true, cancelable: true }
    },
    mouseOver: {
      EventType: MouseEvent,
      defaultInit: { bubbles: true, cancelable: true }
    },
    mouseUp: {
      EventType: MouseEvent,
      defaultInit: { bubbles: true, cancelable: true }
    },
    // Selection Events
    select: {
      EventType: Event,
      defaultInit: { bubbles: true, cancelable: false }
    },
    // Touch Events
    touchCancel: {
      EventType: TouchEvent,
      defaultInit: { bubbles: true, cancelable: false }
    },
    touchEnd: {
      EventType: TouchEvent,
      defaultInit: { bubbles: true, cancelable: true }
    },
    touchMove: {
      EventType: TouchEvent,
      defaultInit: { bubbles: true, cancelable: true }
    },
    touchStart: {
      EventType: TouchEvent,
      defaultInit: { bubbles: true, cancelable: true }
    },
    // UI Events
    scroll: {
      EventType: UIEvent,
      defaultInit: { bubbles: false, cancelable: false }
    },
    // Wheel Events
    wheel: {
      EventType: WheelEvent,
      defaultInit: { bubbles: true, cancelable: true }
    },
    // Media Events
    abort: {
      EventType: Event,
      defaultInit: { bubbles: false, cancelable: false }
    },
    canPlay: {
      EventType: Event,
      defaultInit: { bubbles: false, cancelable: false }
    },
    canPlayThrough: {
      EventType: Event,
      defaultInit: { bubbles: false, cancelable: false }
    },
    durationChange: {
      EventType: Event,
      defaultInit: { bubbles: false, cancelable: false }
    },
    emptied: {
      EventType: Event,
      defaultInit: { bubbles: false, cancelable: false }
    },
    encrypted: {
      EventType: Event,
      defaultInit: { bubbles: false, cancelable: false }
    },
    ended: {
      EventType: Event,
      defaultInit: { bubbles: false, cancelable: false }
    },
    // error: {
    //   EventType: Event,
    //   defaultInit: {bubbles: false, cancelable: false},
    // },
    loadedData: {
      EventType: Event,
      defaultInit: { bubbles: false, cancelable: false }
    },
    loadedMetadata: {
      EventType: Event,
      defaultInit: { bubbles: false, cancelable: false }
    },
    loadStart: {
      EventType: ProgressEvent,
      defaultInit: { bubbles: false, cancelable: false }
    },
    pause: {
      EventType: Event,
      defaultInit: { bubbles: false, cancelable: false }
    },
    play: {
      EventType: Event,
      defaultInit: { bubbles: false, cancelable: false }
    },
    playing: {
      EventType: Event,
      defaultInit: { bubbles: false, cancelable: false }
    },
    progress: {
      EventType: ProgressEvent,
      defaultInit: { bubbles: false, cancelable: false }
    },
    rateChange: {
      EventType: Event,
      defaultInit: { bubbles: false, cancelable: false }
    },
    seeked: {
      EventType: Event,
      defaultInit: { bubbles: false, cancelable: false }
    },
    seeking: {
      EventType: Event,
      defaultInit: { bubbles: false, cancelable: false }
    },
    stalled: {
      EventType: Event,
      defaultInit: { bubbles: false, cancelable: false }
    },
    suspend: {
      EventType: Event,
      defaultInit: { bubbles: false, cancelable: false }
    },
    timeUpdate: {
      EventType: Event,
      defaultInit: { bubbles: false, cancelable: false }
    },
    volumeChange: {
      EventType: Event,
      defaultInit: { bubbles: false, cancelable: false }
    },
    waiting: {
      EventType: Event,
      defaultInit: { bubbles: false, cancelable: false }
    },
    // Image Events
    load: {
      EventType: UIEvent,
      defaultInit: { bubbles: false, cancelable: false }
    },
    error: {
      EventType: Event,
      defaultInit: { bubbles: false, cancelable: false }
    },
    // Animation Events
    animationStart: {
      EventType: AnimationEvent,
      defaultInit: { bubbles: true, cancelable: false }
    },
    animationEnd: {
      EventType: AnimationEvent,
      defaultInit: { bubbles: true, cancelable: false }
    },
    animationIteration: {
      EventType: AnimationEvent,
      defaultInit: { bubbles: true, cancelable: false }
    },
    // Transition Events
    transitionEnd: {
      EventType: TransitionEvent,
      defaultInit: { bubbles: true, cancelable: true }
    }
  };

  var eventAliasMap = {
    doubleClick: 'dblClick'
  };

  function fireEvent(element, event) {
    return element.dispatchEvent(event);
  }

  Object.entries(eventMap).forEach(function (_ref2) {
    var key = _ref2[0],
        _ref2$ = _ref2[1],
        _ref2$$EventType = _ref2$.EventType,
        EventType = _ref2$$EventType === undefined ? Event : _ref2$$EventType,
        defaultInit = _ref2$.defaultInit;

    var eventName = key.toLowerCase();

    fireEvent[key] = function (node, init) {
      var eventInit = _extends({}, defaultInit, init);
      var _eventInit$target = eventInit.target;
      _eventInit$target = _eventInit$target === undefined ? {} : _eventInit$target;
      var value = _eventInit$target.value,
          files = _eventInit$target.files,
          targetProperties = objectWithoutProperties(_eventInit$target, ['value', 'files']);

      Object.assign(node, targetProperties);
      if (value !== undefined) {
        setNativeValue(node, value);
      }
      if (files !== undefined) {
        // input.files is a read-only property so this is not allowed:
        // input.files = [file]
        // so we have to use this workaround to set the property
        Object.defineProperty(node, 'files', {
          value: files
        });
      }
      var event = new EventType(eventName, eventInit);
      return fireEvent(node, event);
    };
  });

  // function written after some investigation here:
  // https://github.com/facebook/react/issues/10135#issuecomment-401496776
  function setNativeValue(element, value) {
    var _ref3 = Object.getOwnPropertyDescriptor(element, 'value') || {},
        valueSetter = _ref3.set;

    var prototype = Object.getPrototypeOf(element);

    var _ref4 = Object.getOwnPropertyDescriptor(prototype, 'value') || {},
        prototypeValueSetter = _ref4.set;

    if (prototypeValueSetter && valueSetter !== prototypeValueSetter) {
      prototypeValueSetter.call(element, value);
    } /* istanbul ignore next (I don't want to bother) */else if (valueSetter) {
        valueSetter.call(element, value);
      } else {
        throw new Error('The given element does not have a value setter');
      }
  }

  Object.entries(eventAliasMap).forEach(function (_ref5) {
    var aliasKey = _ref5[0],
        key = _ref5[1];

    fireEvent[aliasKey] = function () {
      return fireEvent[key].apply(fireEvent, arguments);
    };
  });

  exports.bindElementToQueries = getQueriesForElement;
  exports.within = getQueriesForElement;
  exports.queries = defaultQueries;
  exports.queryHelpers = queryHelpers;
  exports.queryByPlaceholderText = queryByPlaceholderText;
  exports.queryAllByPlaceholderText = queryAllByPlaceholderText;
  exports.getByPlaceholderText = getByPlaceholderText;
  exports.getAllByPlaceholderText = getAllByPlaceholderText;
  exports.queryByText = queryByText;
  exports.queryAllByText = queryAllByText;
  exports.getByText = getByText;
  exports.getAllByText = getAllByText;
  exports.queryByLabelText = queryByLabelText;
  exports.queryAllByLabelText = queryAllByLabelText;
  exports.getByLabelText = getByLabelText;
  exports.getAllByLabelText = getAllByLabelText;
  exports.queryByAltText = queryByAltText;
  exports.queryAllByAltText = queryAllByAltText;
  exports.getByAltText = getByAltText;
  exports.getAllByAltText = getAllByAltText;
  exports.queryBySelectText = queryBySelectText;
  exports.queryAllBySelectText = queryAllBySelectText;
  exports.getBySelectText = getBySelectText;
  exports.getAllBySelectText = getAllBySelectText;
  exports.queryByTestId = queryByTestId;
  exports.queryAllByTestId = queryAllByTestId;
  exports.getByTestId = getByTestId;
  exports.getAllByTestId = getAllByTestId;
  exports.queryByTitle = queryByTitle;
  exports.queryAllByTitle = queryAllByTitle;
  exports.getByTitle = getByTitle;
  exports.getAllByTitle = getAllByTitle;
  exports.queryByValue = queryByValue;
  exports.queryAllByValue = queryAllByValue;
  exports.getByValue = getByValue;
  exports.getAllByValue = getAllByValue;
  exports.queryByRole = queryByRole;
  exports.queryAllByRole = queryAllByRole;
  exports.getAllByRole = getAllByRole;
  exports.getByRole = getByRole;
  exports.wait = wait;
  exports.waitForElement = waitForElement;
  exports.fuzzyMatches = fuzzyMatches;
  exports.matches = matches;
  exports.getNodeText = getNodeText;
  exports.fireEvent = fireEvent;
  exports.getQueriesForElement = getQueriesForElement;
  exports.debugDOM = debugDOM;
  exports.getElementError = getElementError;
  exports.firstResultOrNull = firstResultOrNull;
  exports.queryAllByAttribute = queryAllByAttribute;
  exports.queryByAttribute = queryByAttribute;
  exports.prettyDOM = prettyDOM;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=dom-testing-library.umd.js.map
